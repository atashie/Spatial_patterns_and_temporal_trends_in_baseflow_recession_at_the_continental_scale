########################
####    Part 0
####    Load Necessary Packages
################################################################################
library(data.table)     # for fread, at least
library(lubridate)
library(conicfit)
library(tseries)
substrRight = function(x, n)    {   # for finding the last n characters in a string
    substr(x, nchar(x)-n+1, nchar(x))
}
lmpvalue <- function (modelobject) { # for finding the significance of a (multi)variate model
    if (class(modelobject) != "lm") stop("Not an object of class 'lm' ")
    f <- summary(modelobject)$fstatistic
    p <- pf(f[1],f[2],f[3],lower.tail=F)
    attributes(p) <- NULL
    return(p)
}

    
recess_char = data.frame(       # for storing summary data for each gage
    gage = character(),
    region = character(),
tot_events = integer(),
allmod_slope = double(), 
    uppmod_slope = double(),
    lowmod_slope = double(), 
event_med_slope = double(),
    event_nftyfth_slope = double(), # 95th percentile slope
event_svntyfth_slope = double(), 
event_twntyfth_slope = double(), 
event_fth_slope = double(), # 5th percentile slope
event_sd_slope = double(),
tot_concav = double(), # concavity / convexity calcs
tot_convex = double(),
event_a_rmed = double(),
event_a_r95 = double(),
event_a_r5 = double(),
event_sd_a = double(),
first_date_recess = as.Date(character()),
last_date_recess = as.Date(character()),

julday_slope = double(),

phi_b = double(),
phi_a = double(),
phi_Q = double(),
amp_b = double(),
amp_a = double(),
amp_Q = double(),
modmean_b = double(),
modmean_a = double(),
modmean_Q = double(),
sinrsqr_b = double(),
sinrsqr_a = double(),
sinrsqr_Q = double(),
sinsignif_b = double(),
sinsignif_a = double(),
sinsignif_Q = double(),

pre_phi_b = double(),
pre_phi_a = double(),
pre_phi_Q = double(),
pre_amp_b = double(),
pre_amp_a = double(),
pre_amp_Q = double(),
pre_modmean_b = double(),
pre_modmean_a = double(),
pre_modmean_Q = double(),
pre_sinrsqr_b = double(),
pre_sinrsqr_a = double(),
pre_sinrsqr_Q = double(),
pre_sinsignif_b = double(),
pre_sinsignif_a = double(),
pre_sinsignif_Q = double(),

post_phi_b = double(),
post_phi_a = double(),
post_phi_Q = double(),
post_amp_b = double(),
post_amp_a = double(),
post_amp_Q = double(),
post_modmean_b = double(),
post_modmean_a = double(),
post_modmean_Q = double(),
post_sinrsqr_b = double(),
post_sinrsqr_a = double(),
post_sinrsqr_Q = double(),
post_sinsignif_b = double(),
post_sinsignif_a = double(),
post_sinsignif_Q = double(),

signif_pre_post_b = double(),
signif_pre_post_a = double(),
signif_pre_post_Q = double(),

gracie_signif_a = double(),
gracie_signif_b = double(),
gracie_slope_a = double(),
gracie_slope_b = double(),
gracie_rsqr_a = double(),
gracie_rsqr_b = double(),

mevap_signif_a = double(),
mevap_signif_b = double(),
mevap_slope_a = double(),
mevap_slope_b = double(),
mevap_rsqr_a = double(),
mevap_rsqr_b = double(),

mppt_signif_a = double(),
mppt_signif_b = double(),
mppt_slope_a = double(),
mppt_slope_b = double(),
mppt_rsqr_a = double(),
mppt_rsqr_b = double(),

msm10_signif_a = double(),
msm10_signif_b = double(),
msm10_slope_a = double(),
msm10_slope_b = double(),
msm10_rsqr_a = double(),
msm10_rsqr_b = double(),

msm40_signif_a = double(),
msm40_signif_b = double(),
msm40_slope_a = double(),
msm40_slope_b = double(),
msm40_rsqr_a = double(),
msm40_rsqr_b = double(),

msm100_signif_a = double(),
msm100_signif_b = double(),
msm100_slope_a = double(),
msm100_slope_b = double(),
msm100_rsqr_a = double(),
msm100_rsqr_b = double(),

msm200_signif_a = double(),
msm200_signif_b = double(),
msm200_slope_a = double(),
msm200_slope_b = double(),
msm200_rsqr_a = double(),
msm200_rsqr_b = double(),

gracie_signif_a_30 = double(),
gracie_signif_b_30 = double(),
gracie_slope_a_30 = double(),
gracie_slope_b_30 = double(),
gracie_rsqr_a_30 = double(),
gracie_rsqr_b_30 = double(),

gracie_signif_a_61 = double(),
gracie_signif_b_61 = double(),
gracie_slope_a_61 = double(),
gracie_slope_b_61 = double(),
gracie_rsqr_a_61 = double(),
gracie_rsqr_b_61 = double(),

gracie_signif_a_91 = double(),
gracie_signif_b_91 = double(),
gracie_slope_a_91 = double(),
gracie_slope_b_91 = double(),
gracie_rsqr_a_91 = double(),
gracie_rsqr_b_91 = double(),

gracie_signif_a_122 = double(),
gracie_signif_b_122 = double(),
gracie_slope_a_122 = double(),
gracie_slope_b_122 = double(),
gracie_rsqr_a_122 = double(),
gracie_rsqr_b_122 = double(),

gracie_signif_a_152 = double(),
gracie_signif_b_152 = double(),
gracie_slope_a_152 = double(),
gracie_slope_b_152 = double(),
gracie_rsqr_a_152 = double(),
gracie_rsqr_b_152 = double(),

gracie_signif_a_182 = double(),
gracie_signif_b_182 = double(),
gracie_slope_a_182 = double(),
gracie_slope_b_182 = double(),
gracie_rsqr_a_182 = double(),
gracie_rsqr_b_182 = double(),

gracie_signif_a_213 = double(),
gracie_signif_b_213 = double(),
gracie_slope_a_213 = double(),
gracie_slope_b_213 = double(),
gracie_rsqr_a_213 = double(),
gracie_rsqr_b_213 = double(),

gracie_signif_a_243 = double(),
gracie_signif_b_243 = double(),
gracie_slope_a_243 = double(),
gracie_slope_b_243 = double(),
gracie_rsqr_a_243 = double(),
gracie_rsqr_b_243 = double(),

gracie_signif_a_274 = double(),
gracie_signif_b_274 = double(),
gracie_slope_a_274 = double(),
gracie_slope_b_274 = double(),
gracie_rsqr_a_274 = double(),
gracie_rsqr_b_274 = double(),

gracie_signif_a_304 = double(),
gracie_signif_b_304 = double(),
gracie_slope_a_304 = double(),
gracie_slope_b_304 = double(),
gracie_rsqr_a_304 = double(),
gracie_rsqr_b_304 = double(),

gracie_signif_a_335 = double(),
gracie_signif_b_335 = double(),
gracie_slope_a_335 = double(),
gracie_slope_b_335 = double(),
gracie_rsqr_a_335 = double(),
gracie_rsqr_b_335 = double(),

gracie_signif_a_365 = double(),
gracie_signif_b_365 = double(),
gracie_slope_a_365 = double(),
gracie_slope_b_365 = double(),
gracie_rsqr_a_365 = double(),
gracie_rsqr_b_365 = double(),

gracie_signif_a_396 = double(),
gracie_signif_b_396 = double(),
gracie_slope_a_396 = double(),
gracie_slope_b_396 = double(),
gracie_rsqr_a_396 = double(),
gracie_rsqr_b_396 = double(),

ppty_signif_a_30 = double(),
ppty_signif_b_30 = double(),
ppty_slope_a_30 = double(),
ppty_slope_b_30 = double(),
ppty_rsqr_a_30 = double(),
ppty_rsqr_b_30 = double(),

ppty_signif_a_61 = double(),
ppty_signif_b_61 = double(),
ppty_slope_a_61 = double(),
ppty_slope_b_61 = double(),
ppty_rsqr_a_61 = double(),
ppty_rsqr_b_61 = double(),

ppty_signif_a_91 = double(),
ppty_signif_b_91 = double(),
ppty_slope_a_91 = double(),
ppty_slope_b_91 = double(),
ppty_rsqr_a_91 = double(),
ppty_rsqr_b_91 = double(),

ppty_signif_a_122 = double(),
ppty_signif_b_122 = double(),
ppty_slope_a_122 = double(),
ppty_slope_b_122 = double(),
ppty_rsqr_a_122 = double(),
ppty_rsqr_b_122 = double(),

ppty_signif_a_152 = double(),
ppty_signif_b_152 = double(),
ppty_slope_a_152 = double(),
ppty_slope_b_152 = double(),
ppty_rsqr_a_152 = double(),
ppty_rsqr_b_152 = double(),

ppty_signif_a_182 = double(),
ppty_signif_b_182 = double(),
ppty_slope_a_182 = double(),
ppty_slope_b_182 = double(),
ppty_rsqr_a_182 = double(),
ppty_rsqr_b_182 = double(),

ppty_signif_a_213 = double(),
ppty_signif_b_213 = double(),
ppty_slope_a_213 = double(),
ppty_slope_b_213 = double(),
ppty_rsqr_a_213 = double(),
ppty_rsqr_b_213 = double(),

ppty_signif_a_243 = double(),
ppty_signif_b_243 = double(),
ppty_slope_a_243 = double(),
ppty_slope_b_243 = double(),
ppty_rsqr_a_243 = double(),
ppty_rsqr_b_243 = double(),

ppty_signif_a_274 = double(),
ppty_signif_b_274 = double(),
ppty_slope_a_274 = double(),
ppty_slope_b_274 = double(),
ppty_rsqr_a_274 = double(),
ppty_rsqr_b_274 = double(),

ppty_signif_a_304 = double(),
ppty_signif_b_304 = double(),
ppty_slope_a_304 = double(),
ppty_slope_b_304 = double(),
ppty_rsqr_a_304 = double(),
ppty_rsqr_b_304 = double(),

ppty_signif_a_335 = double(),
ppty_signif_b_335 = double(),
ppty_slope_a_335 = double(),
ppty_slope_b_335 = double(),
ppty_rsqr_a_335 = double(),
ppty_rsqr_b_335 = double(),

ppty_signif_a_365 = double(),
ppty_signif_b_365 = double(),
ppty_slope_a_365 = double(),
ppty_slope_b_365 = double(),
ppty_rsqr_a_365 = double(),
ppty_rsqr_b_365 = double(),

ppty_signif_a_396 = double(),
ppty_signif_b_396 = double(),
ppty_slope_a_396 = double(),
ppty_slope_b_396 = double(),
ppty_rsqr_a_396 = double(),
ppty_rsqr_b_396 = double(),

evapy_signif_a_30 = double(),
evapy_signif_b_30 = double(),
evapy_slope_a_30 = double(),
evapy_slope_b_30 = double(),
evapy_rsqr_a_30 = double(),
evapy_rsqr_b_30 = double(),

evapy_signif_a_61 = double(),
evapy_signif_b_61 = double(),
evapy_slope_a_61 = double(),
evapy_slope_b_61 = double(),
evapy_rsqr_a_61 = double(),
evapy_rsqr_b_61 = double(),

evapy_signif_a_91 = double(),
evapy_signif_b_91 = double(),
evapy_slope_a_91 = double(),
evapy_slope_b_91 = double(),
evapy_rsqr_a_91 = double(),
evapy_rsqr_b_91 = double(),

evapy_signif_a_122 = double(),
evapy_signif_b_122 = double(),
evapy_slope_a_122 = double(),
evapy_slope_b_122 = double(),
evapy_rsqr_a_122 = double(),
evapy_rsqr_b_122 = double(),

evapy_signif_a_152 = double(),
evapy_signif_b_152 = double(),
evapy_slope_a_152 = double(),
evapy_slope_b_152 = double(),
evapy_rsqr_a_152 = double(),
evapy_rsqr_b_152 = double(),

evapy_signif_a_182 = double(),
evapy_signif_b_182 = double(),
evapy_slope_a_182 = double(),
evapy_slope_b_182 = double(),
evapy_rsqr_a_182 = double(),
evapy_rsqr_b_182 = double(),

evapy_signif_a_213 = double(),
evapy_signif_b_213 = double(),
evapy_slope_a_213 = double(),
evapy_slope_b_213 = double(),
evapy_rsqr_a_213 = double(),
evapy_rsqr_b_213 = double(),

evapy_signif_a_243 = double(),
evapy_signif_b_243 = double(),
evapy_slope_a_243 = double(),
evapy_slope_b_243 = double(),
evapy_rsqr_a_243 = double(),
evapy_rsqr_b_243 = double(),

evapy_signif_a_274 = double(),
evapy_signif_b_274 = double(),
evapy_slope_a_274 = double(),
evapy_slope_b_274 = double(),
evapy_rsqr_a_274 = double(),
evapy_rsqr_b_274 = double(),

evapy_signif_a_304 = double(),
evapy_signif_b_304 = double(),
evapy_slope_a_304 = double(),
evapy_slope_b_304 = double(),
evapy_rsqr_a_304 = double(),
evapy_rsqr_b_304 = double(),

evapy_signif_a_335 = double(),
evapy_signif_b_335 = double(),
evapy_slope_a_335 = double(),
evapy_slope_b_335 = double(),
evapy_rsqr_a_335 = double(),
evapy_rsqr_b_335 = double(),

evapy_signif_a_365 = double(),
evapy_signif_b_365 = double(),
evapy_slope_a_365 = double(),
evapy_slope_b_365 = double(),
evapy_rsqr_a_365 = double(),
evapy_rsqr_b_365 = double(),

evapy_signif_a_396 = double(),
evapy_signif_b_396 = double(),
evapy_slope_a_396 = double(),
evapy_slope_b_396 = double(),
evapy_rsqr_a_396 = double(),
evapy_rsqr_b_396 = double(),




stringsAsFactors = FALSE)

    # read in a txt file with the names (and ref / non-ref status) of every gage in CONUS
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2") #C:\\Users\\arikt\\OneDrive\\Documents\\PhD\\Research\\D2") # #C:\\Users\\atashie\\Desktop") for EPA cpu 
all_gages = read.csv("conterm_bas_classif.txt", colClasses = c("STAID" = "character", "AGGECOREGION" = "character")) #   read in the file
ref_gages = which(all_gages$CLASS == "Ref")     #   identify which basins are chategorized as reference basins
run = 0

# read in a txt file with all conus grace, merris2, and basin data
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2\\GRACE data") 
grace = read.csv('conus_grace.csv')
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2\\Merris2_data") 
evap = fread("conus_wrf_evap.csv")
the_notnas = which(!is.na(evap[,10]))
evap_df = evap[the_notnas,] # some pixels are over water and therefore have na values; need to remove these
ppt_df = fread("conus_wrf_ppt.csv")[the_notnas,]
sm10_df = fread("conus_wrf_sm10.csv")[the_notnas,]
sm40_df = fread("conus_wrf_sm40.csv")[the_notnas,]
sm100_df = fread("conus_wrf_sm100.csv")[the_notnas,]
sm200_df = fread("conus_wrf_sm200.csv")[the_notnas,]
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2\\spreadsheets-in-csv-format")#C:\\Users\\arikt\\OneDrive\\Documents\\PhD\\Research\\D2\\spreadsheets-in-csv-format")
basinmorph = read.csv("conterm_bas_morph.txt", colClasses = c("STAID" = "character"))
basinid = read.csv("conterm_basinid.txt", colClasses = c("STAID" = "character"))
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2") 

start_date = "1900-01-01" 
#start_date = "1982-01-01" # when using merris data #"2002-04-01"                # when using grace data
end_date = "2019-06-01"

# Initializing Scenarios
decreasing_dQ = TRUE # must -dQ decrease? if not, then dQ must always be
decreasing_dQ = TRUE # must -dQ decrease? if not, then dQ must always be
minRecessLength = 5 # minimum days for recession
rm_Ith = 1 # remove the first I days of recession
rm_Nth = 0 # remove the last N days of recession
minRecessions = 25
cutoff_year = 1980 # cutoff year for analyzing decadal changes
#long10 = FALSE # should we only analyze the longest 10 events?

# defining objects
slope = 2
intercept = 1
par(mfrow=c(4,4))#par(mfrow=c(2,2))


################################################################################
####    Part 1
####    Read in USGS Data
################################################################################
while (run < length(ref_gages)) { 
#while (run < 12) { #### fewer examples for testing
    run = run + 1
if(run %% 10 == 0) print(run)
    gage_number = all_gages[ref_gages[run], "STAID"]
    recess_char[run, "gage"] = as.character(gage_number)
    recess_char[run, "region"] = all_gages[ref_gages[run] , "AGGECOREGION"]
    
    
    USGS_webpage = paste0("https://waterdata.usgs.gov/nwis/dv?cb_00060=on&format=rdb&site_no=",
        gage_number, "&referred_module=sw&period=&begin_date=",
        start_date, "&end_date=", end_date)
    
        # read in the initial ### lines from the webpage, then find the line where the comment characters actually end
            # the problem is that there are two lines of header on the webpage following a somewhat random number of lines of comment characters, while the number and order of columns is also indeterminite
    max_lines_to_read = 100         # 50 lines is probably safe, but whatever
    gage_header_data = scan(USGS_webpage, what = character(), nmax = max_lines_to_read, sep = "\n")
    if (NROW(gage_header_data) == 100)  {
        init_char = "#"                 # looking for the first line that doesnt start with "#"... prob not efficient 
        increment = 0                   # ultimately tells where fread should start reading in data (+2)
        while (init_char == "#")    {
            increment = increment + 1
            init_char = substr(gage_header_data[increment], 1, 1)
            }
        
        col_names = strsplit(gage_header_data[increment], "\t")        # saving the column names for later
        q_col_num = which(substrRight(col_names[[1]], 11) == "00060_00003")[1] # identifying q using the final 11 chars of the column name
            #sometimes streamflow (00060_00003) is given in multiple units (e.g., cfs and cms) or by multiple gages, so later we identify which has the longest period of record and use that one
            # !!!!! the code currently just uses the first instance.... need to change in future
        if(!is.na(q_col_num))   {
            
                # use fread to skip the first XX lines and headers to read in the actual data
            gage_data = fread(USGS_webpage, header = FALSE, skip = increment + 1, na.strings=c("NA", "Ssn", "Ice", "Eqp", "Bkw", "Dry", "Zfl", "Pr", "Rat", "Fld", "Dis", "--", "Mnt", "***")) # na.strings should change all strings I've listed to NA value, which is fine since we simply won't use that time period
            colnames(gage_data) = col_names[[1]]
            
            
                # creating a new data frame using only streamflow, change in streamflow, and dates
            streamy = cbind.data.frame(as.Date(gage_data$datetime), gage_data[, q_col_num, with = FALSE])
            colnames(streamy) = c("Date", "origQ")

sqkm = basinid$DRAIN_SQKM[which(basinid$STAID == gage_number)] # converting to mm/day
conversion = 60*60*24 / (sqkm * 3280.84 * 3280.84 * 3280.84) * 1000000

streamy$origQ = as.numeric(streamy$origQ) * conversion
            streamy$dQ = NA # creating a column for dQ
            streamy$dQ[1:(length(streamy$origQ)-1)] = diff(streamy$origQ)
minDeltaQ = min(abs(streamy$dQ[which(streamy$dQ != 0)]), na.rm=TRUE)
streamy$Q = streamy$origQ + streamy$dQ / 2 #finding the mean value between Q measurements
            
            
            ################################################################################
            ####    Part 2
            ####    Identifying Recession Events
            ################################################################################
            
                # identifying days where recession is occurring 
            days_to_remove = unique(c(
            which(streamy$dQ >= 0), # removes days of non-decreasing streamflow
            which(streamy$Q == 0), # removes days of zero streamflow
            if(decreasing_dQ){
c(which(diff(streamy$dQ) <= 0) + 1) #removes days where rate of streamflow decay increases 
} else {
c(which(abs(streamy$dQ) == minDeltaQ))
},
            which(is.na(streamy$Q)), # removes days of missing streamflow values
            which(is.na(streamy$dQ)) # removes days of missing dQ values, i.e. the final day
            ))             
            stream_recess = streamy[!days_to_remove, ]
            
                # identifying unique recession events, and removing all other days
#### <-- setting the minimum consecutive days for a recession event to be included
            recess_length = minRecessLength # the days of monontonic recession required to be considered an event
            lagdiff = diff(stream_recess$Date, lag = recess_length) 
            longrecess = which(lagdiff == recess_length)
keepers = NULL
for(i in (rm_Ith):(recess_length-rm_Nth)) {
keepers = c(keepers, longrecess + i)
}

strmfl = stream_recess[sort(unique(keepers)),] # new matrix only including periods of long recession

            
                # naming unique periods of extended recession
            counter = rle(as.vector(c(diff(strmfl$Date),1)))$lengths # counting run lengths of successive days


## <-- set variable tot_events
recess_char[run, "tot_events"] = ceiling(length(counter) / 2)

#### <-- setting the minimum number of recession events before we count a 
            min_num_events = minRecessions        #       setting the min number of captured events required to proceed with analysis
            if(length(counter) >= min_num_events * 2)   {       # x2 because the counter takes two cells for one event
    
                recess_events = NULL
                for(i in seq(from = 1, to = length(counter) - 1, by = 2)) {
                recess_events = c(recess_events, counter[i] + counter[i + 1])
                }
                recess_events = c(recess_events, last(counter))
                strmfl$event = rep(1:length(recess_events), recess_events)
    
# if(long10) {
# # identifying specific recession events
# recessPeriods = rle(strmfl$event)
# recessValuesSrtd = recessPeriods$values[order(recessPeriods$lengths, decreasing=TRUE)] # sorting the recession periods by length of recession (days)
# 
# strmfl$long = FALSE
# strmfl$long[which(strmfl$event %in% head(recessValuesSrtd, 10))] = TRUE #identifying the (x) longest periods of recession
# } else {strmfl$long = TRUE}
    
                ################################################################################
                ####    Part 3
                ####    Recession Analysis
                ################################################################################
                
                
                    # log transformations of the data
                strmfl$lg_dQ = log10(abs(strmfl$dQ))
                strmfl$lg_Q = log10(strmfl$Q)
                
                # linear model for all data
                allmod = lm(strmfl$lg_dQ ~ strmfl$lg_Q)
## <-- set variable allmod_slope
recess_char[run, "allmod_slope"] = allmod$coef[slope]
recess_char[run, "first_date_recess"] = first(strmfl$Date)
recess_char[run, "last_date_recess"] = last(strmfl$Date)

# Brut and Nieb regression
# nmbrOfBins = 15 # number of bins for Kirch and BrutnNieb 
# minModL = nmbrOfBins - 5 # if 5 is the fewest points necessary for a regression
# nPerBin = floor(length(strmfl$Q) / nmbrOfBins)
# xtrs = length(strmfl$Q) %% nmbrOfBins # extra data points (the remainder from division)
# if(xtrs > 0) {
# longs = rep(1:xtrs, each=nPerBin+1) # some bins get one extra data point (I chose the earlier bins for no particular reason)
# shorts = rep((xtrs+1):nmbrOfBins, each=nPerBin) # bins which don't get the extra data point
# strmfl$bin[order(strmfl$Q)] = c(longs,shorts) # new column which identifies which bin each data point goes into
# } else {
# strmfl$bin = rep(1:nmbrOfBins, each = nPerBin)
# }
# 
# #medQs = NULL # these were used for kirchner regression... don't thinks we need them now
# #meddQs = NULL
# numBotVals = floor(nPerBin * 0.1) # for selecting the events which form the upper/lower envelope... at 0.1 we'd theoretically have 5% of values below the envelope
# minQs = NULL # these values aren't for Kirchner regression, but for Brut and Nieb below
# mindQs = NULL
# for(i in 1:nmbrOfBins) {
# valLocs = which(strmfl$bin == i)
# #medQs[i] = median(strmfl[valLocs,"lg_Q"][[1]])
# minQs[i] = median(head(sort(strmfl[valLocs,"lg_Q"][[1]]), numBotVals))
# mindQs[i] = median(head(sort(strmfl[valLocs,"lg_dQ"][[1]]), numBotVals))
# }
#
# lowEnvSlp = NULL
## uppEnvSlp = NULL
# k = 1
# for(j in 5:minModL) { # determine a knickpoint for separating the upper from the lower envelope
# lowEnvSlp[k] = lm(mindQs[1:j] ~ minQs[1:j])$coef[[2]]
# uppEnvSlp[k] = lm(mindQs[j:nmbrOfBins] ~ minQs[j:nmbrOfBins])$coef[[2]]
# k = k + 1
# }
# maxDiffIter = which.max(uppEnvSlp - lowEnvSlp)
# lowEnvReg = lm(mindQs[1:(5+maxDiffIter)] ~ minQs[1:(5+maxDiffIter)])
# uppEnvReg = lm(mindQs[(5+maxDiffIter):nmbrOfBins] ~ minQs[(5+maxDiffIter):nmbrOfBins])
## <-- set variables uppmod_slope and lowmod_slope
# recess_char[run, "uppmod_slope"] = uppEnvReg$coef[slope]
# recess_char[run, "lowmod_slope"] = lowEnvReg$coef[slope]
  

# linear models for each recession event; also contrasting concavity/convexity
medevent_lg_Q = NULL
eventslope = NULL
eventinter = NULL
totconvex = NULL
totconcav = NULL
eventmonth = NULL
strmfl$month = NA
strmfl$b_val = NA


j = 0
for(i in unique(strmfl$event)) { #amend [strmfl$long] iff usinging only the longet x# of events
j = j + 1
this_event = which(strmfl$event == i)
medevent_lg_Q[j] = median(strmfl$lg_Q[this_event])

eventlmmod = lm(strmfl$lg_dQ[this_event] ~ strmfl$lg_Q[this_event]) #lm mod for event
eventslope[j] = eventlmmod$coef[slope] 
strmfl$b_val[this_event] = eventslope[j]
# event intercept determined later, after a standard value of b is set

# assessing convexity using the first and last residual
the_residuals = eventlmmod$res
firstandlast = sum(first(the_residuals), last(the_residuals))   # if first and last residuals are negative, then concave up... is this reasonable?
ressum = ifelse(firstandlast < 0, 1, 0)   # assigning a value of 1 to convex down and 0 to convex up

# for collecting events where the slope is greater at the end than the beginning; i.e. a convex up curve
middleofevent = length(this_event) / 2
begineventslope = lm(strmfl$lg_dQ[this_event[1:floor(middleofevent)]] ~ strmfl$lg_Q[this_event[1:floor(middleofevent)]])$coef[slope]
endeventslope = lm(strmfl$lg_dQ[this_event[ceiling(middleofevent):length(this_event)]] ~ strmfl$lg_Q[this_event[ceiling(middleofevent):length(this_event)]])$coef[slope]
slpvslp = ifelse(endeventslope > begineventslope, 1, 0)

# for collecting events where an exponential model fits the data better than a logarithmic model
expeventr = summary(lm(exp(strmfl$lg_dQ[this_event]) ~ strmfl$lg_Q[this_event]))$adj.r.squared
modified_lg_Q = strmfl$lg_Q[this_event] + 100
modified_lg_dQ = strmfl$lg_dQ[this_event] + 100
logeventr = summary(lm(log(modified_lg_dQ) ~ modified_lg_Q))$adj.r.squared # this is getting sloppy; trying to create a logarithmic model, but there are negative values, so I'm shifting the data into positive space by adding a large number
expvlog = ifelse(expeventr > logeventr, 1, 0)

# assessing convexity using the centroid of a 'circle'
circlemod = CircleFitByKasa(cbind(strmfl$lg_Q[this_event], strmfl$lg_dQ[this_event]))
circlocsum = ifelse(circlemod[1,1] > median(strmfl$lg_Q[this_event]), 1, 0) 

# multi metric indicator of concavity / convexity
totconvex[j] = ifelse(sum(ressum + slpvslp + expvlog + circlocsum) >=3, 1, 0)
totconcav[j] = ifelse(ressum + slpvslp + expvlog + circlocsum <=1, 1, 0)

# creating a vector to identify the month of initiationof each event
eventmonth[j] = month(strmfl$Date[this_event][1])
strmfl$month[this_event] = rep(month(strmfl$Date[this_event][1]), length(this_event)) # defining months for events for later use
}


# for defining typical a values given a constant (typical) b
strmfl$a_val = NA 
medEvSlope = median(eventslope)
j = 0
for(i in unique(strmfl$event)) { #amend [strmfl$long] iff usinging only the longet x# of events
j = j + 1
this_event = which(strmfl$event == i)
eventlmmod = lm(strmfl$lg_dQ[this_event] ~ 1 + offset(medEvSlope * strmfl$lg_Q[this_event]))
eventinter[j] = eventlmmod$coef[intercept]
strmfl$a_val[this_event] = eventinter[j]


}


## <-- set variables on event slope and concavity
recess_char[run, "event_med_slope"] = medEvSlope
recess_char[run, "event_nftyfth_slope"] = quantile(eventslope, .95)
recess_char[run, "event_svntyfth_slope"] = quantile(eventslope, .75) 
recess_char[run, "event_twntyfth_slope"] = quantile(eventslope, .25) 
recess_char[run, "event_fth_slope"] = quantile(eventslope, .05) 
recess_char[run, "event_sd_slope"] = sd(eventslope)
recess_char[run, "tot_convex"] = sum(totconvex) # total number of events for which 4 out of 5 tests show convexity
recess_char[run, "tot_concav"] = sum(totconcav) # total number of events for which 4 out of 5 tests show concavity        
recess_char[run, "event_a_rmed"] = median(eventinter)
recess_char[run, "event_a_r95"] = quantile(eventinter, .95)
recess_char[run, "event_a_r5"] = quantile(eventinter, .05)
recess_char[run, "event_sd_a"] = sd(eventinter)

##########################################
                ################################################################################
                ####    Part 4
                ####    Finding typical julian values
                ################################################################################
                
                # Julian day
                strmfl$julday = yday(strmfl$Date) 
maxDaysMissing = max(diff(sort(unique(strmfl$julday)))) #maximum number of julian days missing in streamflow record
                days_of_window = max(60, maxDaysMissing)     # this will include x days on either side of the chosen day for calculating the median value


  #    mod_df$julday = yday(mod_df$Date) 
                
                
                xmeds = NULL    # for finding the median values of individual events smoothed by day
                ymeds = NULL
bmeds = NULL
ameds = NULL
            # slopemeds = NULL
                for (m in 1:366) {
n = m + days_of_window
p = m - days_of_window

p_loop = ifelse(p < 1, 366 + p, 367)
n_loop = ifelse(n > 366, n - 366, 0)

the_days = c(p_loop:367, p:n, 0:n_loop)
jul_days = the_days[which(the_days %in% 1:366)]

                all_exes = strmfl[jul_days, "lg_Q"]
                all_whys = strmfl[jul_days, "lg_dQ"]
}

                xmed = median(all_exes$lg_Q, na.rm = TRUE)
                ymed = median(all_whys$lg_dQ, na.rm = TRUE)
                xmeds = c(xmeds, xmed)
                ymeds = c(ymeds, ymed)

                #   the_days_moddf = which(mod_df$julday >= m & mod_df$julday <= n)
                # all_slopes = mod_df[the_days_moddf, "slope"]
                    
                #   slopemed = median(all_slopes, na.rm = TRUE)
                #   slopemeds = c(slopemeds, slopemed)
  
                
                days_to_fltr = 30       # the number of days applied to the filter
                daylist = c((366 - days_to_fltr):366, 1:366, 1:days_to_fltr)

#   dailymeds = matrix(c(xmeds[daylist], ymeds[daylist], slopemeds[daylist]),
            # ncol = 3, dimnames = list(NULL, c("Q", "dQ", "slope")))
                dailymeds = matrix(c(xmeds[daylist], ymeds[daylist], bmeds[daylist], ameds[daylist]),
ncol = 2, dimnames = list(NULL, c("Q", "dQ")))
                    
                fltr_vals = c(log(1:days_to_fltr),  # weighting the values with log
                    log(days_to_fltr + 1),
                    log(days_to_fltr:1))
                fltr_sclr = fltr_vals / sum(fltr_vals)
                fltrd_meds = matrix(data = NA, nrow = 366, ncol = 4,    
                    dimnames = list(NULL, c("Q", "dQ", "b_val", "a_val")))
                for (m in 1:366) {
                n = m + days_to_fltr * 2
                
                fltrd_meds[m, "Q"] = sum(dailymeds[m:n, "Q"] * fltr_sclr, na.rm = TRUE)
                    fltrd_meds[m, "dQ"] = sum(dailymeds[m:n, "dQ"] * fltr_sclr, na.rm = TRUE)
}
# par(mfrow=c(3,1))
# plot(fltrd_meds[,"Q"]); plot(fltrd_meds[,"dQ"]); plot(fltrd_meds[,"Q"], fltrd_meds[,"dQ"])
                
    
## <-- julian day recession
fltrd_df = data.frame(Q = fltrd_meds[, "Q"], dQ = fltrd_meds[, "dQ"])
julian_mod = lm(dQ ~ Q, data=fltrd_df)
recess_char[run, "julday_slope"] = julian_mod$coeff[slope]

    #    recess_char[run, "event_med_slope"] = median(mod_df$slope)
    
################################################################################
                ####    Part 5
                #### finding trends in the data
                ################################################################################

# for slopes (b)
fit_lm_b = lm(strmfl$b_val ~ sin(2*pi*strmfl$julday/366) + cos(2*pi*strmfl$julday/366))
b0_b <- coef(fit_lm_b)[1]
alpha_b <- coef(fit_lm_b)[2]
beta_b <- coef(fit_lm_b)[3]
amplitude_b <- sqrt(alpha_b^2 + beta_b^2)
phi_b <- atan2(beta_b, alpha_b)
signif_b = lmpvalue(fit_lm_b)
adjrsqr_b = summary(fit_lm_b)$adj.r.squared

#for yint (a)
fit_lm_a = lm(strmfl$a_val ~ sin(2*pi*strmfl$julday/366) + cos(2*pi*strmfl$julday/366))
b0_a <- coef(fit_lm_a)[1]
alpha_a <- coef(fit_lm_a)[2]
beta_a <- coef(fit_lm_a)[3]
amplitude_a <- sqrt(alpha_a^2 + beta_a^2)
phi_a <- atan2(beta_a, alpha_a)
signif_a = lmpvalue(fit_lm_a)
adjrsqr_a = summary(fit_lm_a)$adj.r.squared

#for streamflow during recession (Q)
fit_lm_Q = lm(strmfl$Q ~ sin(2*pi*strmfl$julday/366) + cos(2*pi*strmfl$julday/366))
b0_Q <- coef(fit_lm_Q)[1]
alpha_Q <- coef(fit_lm_Q)[2]
beta_Q <- coef(fit_lm_Q)[3]
amplitude_Q <- sqrt(alpha_Q^2 + beta_Q^2)
phi_Q <- atan2(beta_Q, alpha_Q)
signif_Q = lmpvalue(fit_lm_Q)
adjrsqr_Q = summary(fit_lm_Q)$adj.r.squared

recess_char[run, "phi_b"] = phi_b
recess_char[run, "phi_a"] = phi_a
recess_char[run, "phi_Q"] = phi_Q
recess_char[run, "amp_b"] = amplitude_b
recess_char[run, "amp_a"] = amplitude_a
recess_char[run, "amp_Q"] = amplitude_Q
recess_char[run, "modmean_b"] = b0_b
recess_char[run, "modmean_a"] = b0_a
recess_char[run, "modmean_Q"] = b0_Q
recess_char[run, "sinrsqr_b"] = adjrsqr_b
recess_char[run, "sinrsqr_a"] = adjrsqr_a
recess_char[run, "sinrsqr_Q"] = adjrsqr_Q
recess_char[run, "sinsignif_b"] = signif_b
recess_char[run, "sinsignif_a"] = signif_a
recess_char[run, "sinsignif_Q"] = signif_Q


############################ same, but for pre- and post- cutoff year
if(min(year(strmfl$Date)) < cutoff_year) {
pre = which(year(strmfl$Date) < cutoff_year)
if (length(pre) > 20) {
post = which(year(strmfl$Date) >= cutoff_year)
if (length(post) > 20) {
# for pre-cutoff
# for slopes (b) 
pre_fit_lm_b = lm(strmfl$b_val[pre] ~ sin(2*pi*strmfl$julday[pre]/366) + cos(2*pi*strmfl$julday[pre]/366))
pre_b0_b <- coef(pre_fit_lm_b)[1]
pre_alpha_b <- coef(pre_fit_lm_b)[2]
pre_beta_b <- coef(pre_fit_lm_b)[3]
pre_amplitude_b <- sqrt(pre_alpha_b^2 + pre_beta_b^2)
pre_phi_b <- atan2(pre_beta_b, pre_alpha_b)
pre_signif_b = lmpvalue(pre_fit_lm_b)
pre_adjrsqr_b = summary(pre_fit_lm_b)$adj.r.squared

#for yint (a)
pre_fit_lm_a = lm(strmfl$a_val[pre] ~ sin(2*pi*strmfl$julday[pre]/366) + cos(2*pi*strmfl$julday[pre]/366))
pre_b0_a <- coef(pre_fit_lm_a)[1]
pre_alpha_a <- coef(pre_fit_lm_a)[2]
pre_beta_a <- coef(pre_fit_lm_a)[3]
pre_amplitude_a <- sqrt(pre_alpha_a^2 + pre_beta_a^2)
pre_phi_a <- atan2(pre_beta_a, pre_alpha_a)
pre_signif_a = lmpvalue(pre_fit_lm_a)
pre_adjrsqr_a = summary(pre_fit_lm_a)$adj.r.squared

#for streamflow during recession (Q)
pre_fit_lm_Q = lm(strmfl$Q[pre] ~ sin(2*pi*strmfl$julday[pre]/366) + cos(2*pi*strmfl$julday[pre]/366))
pre_b0_Q <- coef(pre_fit_lm_Q)[1]
pre_alpha_Q <- coef(pre_fit_lm_Q)[2]
pre_beta_Q <- coef(pre_fit_lm_Q)[3]
pre_amplitude_Q <- sqrt(pre_alpha_Q^2 + pre_beta_Q^2)
pre_phi_Q <- atan2(pre_beta_Q, pre_alpha_Q)
pre_signif_Q = lmpvalue(pre_fit_lm_Q)
pre_adjrsqr_Q = summary(pre_fit_lm_Q)$adj.r.squared

recess_char[run, "pre_phi_b"] = pre_phi_b
recess_char[run, "pre_phi_a"] = pre_phi_a
recess_char[run, "pre_phi_Q"] = pre_phi_Q
recess_char[run, "pre_amp_b"] = pre_amplitude_b
recess_char[run, "pre_amp_a"] = pre_amplitude_a
recess_char[run, "pre_amp_Q"] = pre_amplitude_Q
recess_char[run, "pre_modmean_b"] = pre_b0_b
recess_char[run, "pre_modmean_a"] = pre_b0_a
recess_char[run, "pre_modmean_Q"] = pre_b0_Q
recess_char[run, "pre_sinrsqr_b"] = pre_adjrsqr_b
recess_char[run, "pre_sinrsqr_a"] = pre_adjrsqr_a
recess_char[run, "pre_sinrsqr_Q"] = pre_adjrsqr_Q
recess_char[run, "pre_sinsignif_b"] = pre_signif_b
recess_char[run, "pre_sinsignif_a"] = pre_signif_a
recess_char[run, "pre_sinsignif_Q"] = pre_signif_Q



# for post-cutoff
# for slopes (b) 
post_fit_lm_b = lm(strmfl$b_val[post] ~ sin(2*pi*strmfl$julday[post]/366) + cos(2*pi*strmfl$julday[post]/366))
post_b0_b <- coef(post_fit_lm_b)[1]
post_alpha_b <- coef(post_fit_lm_b)[2]
post_beta_b <- coef(post_fit_lm_b)[3]
post_amplitude_b <- sqrt(post_alpha_b^2 + post_beta_b^2)
post_phi_b <- atan2(post_beta_b, post_alpha_b)
post_signif_b = lmpvalue(post_fit_lm_b)
post_adjrsqr_b = summary(post_fit_lm_b)$adj.r.squared

#for yint (a)
post_fit_lm_a = lm(strmfl$a_val[post] ~ sin(2*pi*strmfl$julday[post]/366) + cos(2*pi*strmfl$julday[post]/366))
post_b0_a <- coef(post_fit_lm_a)[1]
post_alpha_a <- coef(post_fit_lm_a)[2]
post_beta_a <- coef(post_fit_lm_a)[3]
post_amplitude_a <- sqrt(post_alpha_a^2 + post_beta_a^2)
post_phi_a <- atan2(post_beta_a, post_alpha_a)
post_signif_a = lmpvalue(post_fit_lm_a)
post_adjrsqr_a = summary(post_fit_lm_a)$adj.r.squared

#for streamflow during recession (Q)
post_fit_lm_Q = lm(strmfl$Q[post] ~ sin(2*pi*strmfl$julday[post]/366) + cos(2*pi*strmfl$julday[post]/366))
post_b0_Q <- coef(post_fit_lm_Q)[1]
post_alpha_Q <- coef(post_fit_lm_Q)[2]
post_beta_Q <- coef(post_fit_lm_Q)[3]
post_amplitude_Q <- sqrt(post_alpha_Q^2 + post_beta_Q^2)
post_phi_Q <- atan2(post_beta_Q, post_alpha_Q)
post_signif_Q = lmpvalue(post_fit_lm_Q)
post_adjrsqr_Q = summary(post_fit_lm_Q)$adj.r.squared

recess_char[run, "post_phi_b"] = post_phi_b
recess_char[run, "post_phi_a"] = post_phi_a
recess_char[run, "post_phi_Q"] = post_phi_Q
recess_char[run, "post_amp_b"] = post_amplitude_b
recess_char[run, "post_amp_a"] = post_amplitude_a
recess_char[run, "post_amp_Q"] = post_amplitude_Q
recess_char[run, "post_modmean_b"] = post_b0_b
recess_char[run, "post_modmean_a"] = post_b0_a
recess_char[run, "post_modmean_Q"] = post_b0_Q
recess_char[run, "post_sinrsqr_b"] = post_adjrsqr_b
recess_char[run, "post_sinrsqr_a"] = post_adjrsqr_a
recess_char[run, "post_sinrsqr_Q"] = post_adjrsqr_Q
recess_char[run, "post_sinsignif_b"] = post_signif_b
recess_char[run, "post_sinsignif_a"] = post_signif_a
recess_char[run, "post_sinsignif_Q"] = post_signif_Q


recess_char[run, "signif_pre_post_b"] = ks.test(strmfl$b_val[pre], strmfl$b_val[post])$p.value
recess_char[run, "signif_pre_post_a"] = ks.test(strmfl$a_val[pre], strmfl$a_val[post])$p.value
recess_char[run, "signif_pre_post_Q"] = ks.test(strmfl$Q[pre], strmfl$Q[post])$p.value


}
}


}


# plot(strmfl$julday * 12 / 366, strmfl$b_val, pch=1, col='grey40')
# points(x=1:12, y=recess_char[run,c(80,69:79)], pch=16, cex=2, col='red3')
# points(strmfl$julday * 12 / 366, fitted(fit_lm_b), pch='.', cex=3, col='blue3')
# 
# setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2\\images\\scatterplots")
# the_title = paste(gage_number, "a")
# png(paste0(the_title, ".png"), width=1200, height=300)
# plot(strmfl$Date, strmfl$a_val)
# lm_a = lm(strmfl$a_val ~ strmfl$Date)
# abline(h=mean(strmfl$a_val), lty=5)
# if(coef(summary(lm_a))[2,4] < .05) {
# abline(coef(lm_a)[1], coef(lm_a)[2])
# }
# title(paste(summary(lm_a)$adj))
# dev.off()

# the_title = paste(gage_number, "b")
# png(paste0(the_title, ".png"), width=1200, height=300)
# plot(strmfl$Date, strmfl$b_val)
# lm_b = lm(strmfl$b_val ~ strmfl$Date)
# abline(h=mean(strmfl$b_val), lty=5)
# if(coef(summary(lm_b))[2,4] < .05) {
# abline(coef(lm_b)[1], coef(lm_b)[2])
# }
# title(paste(summary(lm_b)$adj))
# dev.off()





######################################################### trends related to grace and merris2 data
# dev.off(); par(mfrow=c(4,7))
grace_dates = as_date(substring(names(grace)[-c(1,2,3)], 2)) #converting column names to dates
if (min(grace_dates) + 365 < max(strmfl$Date)) { # removing streamflow records which don't coincide with GRACE

#identifying the centroid of the basin
lat_cent = basinmorph[which(basinmorph$STAID == gage_number),"LAT_CENT"]
lon_cent = 360 + basinmorph[which(basinmorph$STAID == gage_number),"LONG_CENT"]
#identifying the nearest grace pixel
close_lon = which(abs(grace$lon - lon_cent) == min(abs(grace$lon - lon_cent)))
close_lat = which(abs(grace$lat - lat_cent) == min(abs(grace$lat - lat_cent))) 
closest = close_lon[close_lon %in% close_lat]


# grace data
grace_anoms = t(grace[closest,-c(1,2,3)])

#linear interpolation
gracie_ds = seq(min(grace_dates), max(grace_dates), by='days')
num_days = length(gracie_ds)
# gracie_dates = data.frame(gracie_ds)
gracie_anoms = data.frame(approx(grace_dates, grace_anoms, n=num_days))[2]
gracie = cbind(gracie_ds, gracie_anoms)
names(gracie) = c("Date", "grace_anoms")

if(any(strmfl$Date %in% gracie$Date)) {
strmfl_gracie = merge(strmfl, gracie, by='Date')


gracie_a = lm(strmfl_gracie$a_val ~ strmfl_gracie$grace_anoms)
gracie_a_slope = coef(summary(gracie_a))[2,1]
gracie_a_adjr = summary(gracie_a)$adj
gracie_a_signif = coef(summary(gracie_a))[2,4]
# plot(strmfl_gracie$grace_anoms, strmfl_gracie$a_val)
# if(gracie_a_signif < .05) {
## abline(gracie_a)
# legend("topright",
# legend=c(round(gracie_a_adjr, 3), round(gracie_a_slope,3)))
# }

gracie_b = lm(strmfl_gracie$b_val ~ strmfl_gracie$grace_anoms)
gracie_b_slope = coef(summary(gracie_b))[2,1]
gracie_b_adjr = summary(gracie_b)$adj
gracie_b_signif = coef(summary(gracie_b))[2,4]
# plot(strmfl_gracie$grace_anoms, strmfl_gracie$b_val)
# if(gracie_b_signif < .05) {
# abline(gracie_b)
# legend("topleft",
# legend=c(round(gracie_b_adjr, 3), round(gracie_b_slope,3)))
# }


recess_char[run, "gracie_signif_a"] = gracie_a_signif
recess_char[run, "gracie_signif_b"] = gracie_b_signif
recess_char[run, "gracie_slope_a"] = gracie_a_slope
recess_char[run, "gracie_slope_b"] = gracie_b_slope
recess_char[run, "gracie_rsqr_a"] = gracie_a_adjr
recess_char[run, "gracie_rsqr_b"] = gracie_b_adjr
}
}

# again, with time lags
lags = c(30,61,91,122,152,182,213,243,274,304,335,365,396)
#gracie$days_since = as.numeric(difftime(gracie$Date, gracie$Date[1], units='days') + 1) # to decorrelate data first, be sure to change line 1064, too
#fit_lm_gracie = lm(gracie$grace_anoms ~ sin(2*pi*gracie$days_since/365.25) + cos(2*pi*gracie$days_since/365.25))
#gracie$decor = gracie$grace_anoms - fitted(fit_lm_gracie)

#plot(gracie$Date, gracie$grace_anoms - fitted(fit_lm_gracie))
#lines(gracie$Date, fitted(fit_lm_gracie), col='blue') 

gracie_lag = matrix(ncol=length(lags))
gracie_lag = cbind(gracie$Date, data.frame(gracie_lag))
names(gracie_lag) = c("Date", paste(lags))
for (g in 1:length(lags)) {
for (h in 1:(length(gracie_lag$Date)-lags[g])) {
gracie_lag[h+lags[g],g+1] = sum(gracie$grace_anoms[h:(h+30)])
}
}
strmfl_gracie_lag = merge(strmfl, gracie_lag, by='Date')

for(this_lag in 1:length(lags)) {

if(any(!is.na(strmfl_gracie_lag))) {
whichcol = 11+this_lag
whichrows = which(!is.na(strmfl_gracie_lag[,whichcol,with=FALSE]))
if(length(whichrows > 0)) {if(abs(diff(range(strmfl_gracie_lag$a_val[whichrows]))) > 0 & length(whichrows > 0)) {

lags_gracie_a = lm(strmfl_gracie_lag$a_val[whichrows] ~ unlist(strmfl_gracie_lag[whichrows,whichcol,with=FALSE]))
lags_gracie_a_slope = coef(summary(lags_gracie_a))[2,1]
lags_gracie_a_adjr = summary(lags_gracie_a)$adj
lags_gracie_a_signif = coef(summary(lags_gracie_a))[2,4]
# plot(unlist(strmfl_gracie_lag[whichrows,whichcol,with=FALSE]), strmfl_gracie_lag$a_val[whichrows])
# if(lags_gracie_a_signif < .05) {
# abline(lags_gracie_a)
# legend("topright",
# legend=c(round(lags_gracie_a_adjr, 3), round(lags_gracie_a_slope,3)))
# }

lags_gracie_b = lm(strmfl_gracie_lag$b_val[whichrows] ~ unlist(strmfl_gracie_lag[whichrows,whichcol,with=FALSE]))
lags_gracie_b_slope = coef(summary(lags_gracie_b))[2,1]
lags_gracie_b_adjr = summary(lags_gracie_b)$adj
lags_gracie_b_signif = coef(summary(lags_gracie_b))[2,4]
#plot(unlist(strmfl_gracie_lag[whichrows,whichcol,with=FALSE]), strmfl_gracie_lag$b_val[whichrows])
# if(lags_gracie_b_signif < .05) {
# abline(lags_gracie_b)
# legend("topleft",
# legend=c(round(lags_gracie_b_adjr, 3), round(lags_gracie_b_slope,3)))
# }
} }
}

recess_char[run, paste0("gracie_signif_a_", lags[this_lag])] = lags_gracie_a_signif
recess_char[run, paste0("gracie_signif_b_", lags[this_lag])] = lags_gracie_b_signif
recess_char[run, paste0("gracie_slope_a_", lags[this_lag])] = lags_gracie_a_slope
recess_char[run, paste0("gracie_slope_b_", lags[this_lag])] = lags_gracie_b_slope
recess_char[run, paste0("gracie_rsqr_a_", lags[this_lag])] = lags_gracie_a_adjr
recess_char[run, paste0("gracie_rsqr_b_", lags[this_lag])] = lags_gracie_b_adjr
}




# again, with merris data
merris_dates = seq(from = as_date("1982-01-15"), by='months', length=(ncol(evap_df)-3))
if (min(merris_dates) + 365 < max(strmfl$Date)) { # removing streamflow records which don't coincide with Merris
#identifying the nearest merris pixel
close_lon = which(abs((180-evap_df$lon - lon_cent)) == min(abs((180-evap_df$lon) - lon_cent)))
close_lat = which(abs(evap_df$lat - lat_cent) == min(abs(evap_df$lat - lat_cent))) 
if(any(close_lon %in% close_lat)) {
closest = close_lon[close_lon %in% close_lat]
} else {
closest_lonnie = which.min(abs(evap_df$lat[close_lon] - evap_df$lat[close_lat][1]))
closest = close_lon[closest_lonnie]
}


# merris data
m_evap = t(evap_df[closest,-c(1,2,3)])
m_ppt = t(ppt_df[closest,-c(1,2,3)])
m_sm10 = t(sm10_df[closest,-c(1,2,3)])
m_sm40 = t(sm40_df[closest,-c(1,2,3)])
m_sm100 = t(sm100_df[closest,-c(1,2,3)])
m_sm200 = t(sm200_df[closest,-c(1,2,3)])


#linear interpolation
merris_ds = seq(min(merris_dates), max(merris_dates), by='days')
num_days = length(merris_ds)
# merry_dates = data.frame(merris_ds)
my_evap = data.frame(approx(merris_dates, m_evap, n=num_days))[2]
my_ppt = data.frame(approx(merris_dates, m_ppt, n=num_days))[2]
my_sm10 = data.frame(approx(merris_dates, m_sm10, n=num_days))[2]
my_sm40 = data.frame(approx(merris_dates, m_sm40, n=num_days))[2]
my_sm100 = data.frame(approx(merris_dates, m_sm100, n=num_days))[2]
my_sm200 = data.frame(approx(merris_dates, m_sm200, n=num_days))[2]

evapy = cbind(merris_ds, my_evap)
ppty = cbind(merris_ds, my_ppt)
sm10y = cbind(merris_ds, my_sm10)
sm40y = cbind(merris_ds, my_sm40)
sm100y = cbind(merris_ds, my_sm100)
sm200y = cbind(merris_ds, my_sm200)

names(evapy) = c("Date", "evapy")
names(ppty) = c("Date", "ppty")
names(sm10y) = c("Date", "sm10y")
names(sm40y) = c("Date", "sm40y")
names(sm100y) = c("Date", "sm100y")
names(sm200y) = c("Date", "sm200y")

strmfl_merrie = merge(strmfl, evapy, by='Date')
strmfl_merrie = merge(strmfl_merrie, ppty, by='Date')
strmfl_merrie = merge(strmfl_merrie, sm10y, by='Date')
strmfl_merrie = merge(strmfl_merrie, sm40y, by='Date')
strmfl_merrie = merge(strmfl_merrie, sm100y, by='Date')
strmfl_merrie = merge(strmfl_merrie, sm200y, by='Date')

evap_a = lm(strmfl_merrie$a_val ~ strmfl_merrie$evapy)
evap_a_slope = coef(summary(evap_a))[2,1]
evap_a_adjr = summary(evap_a)$adj
evap_a_signif = coef(summary(evap_a))[2,4]
# plot(strmfl_merrie$evapy, strmfl_merrie$a_val)
# if(evap_a_signif < .05) {
# abline(evap_a)
# legend("topright",
# legend=c(round(evap_a_adjr, 3), round(evap_a_slope,3)))
# }

evap_b = lm(strmfl_merrie$b_val ~ strmfl_merrie$evapy)
evap_b_slope = coef(summary(evap_b))[2,1]
evap_b_adjr = summary(evap_b)$adj
evap_b_signif = coef(summary(evap_b))[2,4]
# plot(strmfl_merrie$evapy, strmfl_merrie$b_val)
# if(evap_b_signif < .05) {
# abline(evap_b)
# legend("topleft",
# legend=c(round(evap_b_adjr, 3), round(evap_b_slope,3)))
# }

if(diff(range(ppty$ppty))>0) { # sometimes ppt is almost always 0, so there's no slope; this exception keeps a error from popping out of the loop
ppt_a = lm(strmfl_merrie$a_val ~ strmfl_merrie$ppty)
ppt_a_slope = coef(summary(ppt_a))[2,1]
ppt_a_adjr = summary(ppt_a)$adj
ppt_a_signif = coef(summary(ppt_a))[2,4]
# plot(strmfl_merrie$ppty, strmfl_merrie$a_val)
# if(ppt_a_signif < .05) {
# abline(ppt_a)
# legend("topright",
# legend=c(round(ppt_a_adjr, 3), round(ppt_a_slope,3)))
# }

ppt_b = lm(strmfl_merrie$b_val ~ strmfl_merrie$ppty)
ppt_b_slope = coef(summary(ppt_b))[2,1]
ppt_b_adjr = summary(ppt_b)$adj
ppt_b_signif = coef(summary(ppt_b))[2,4]
# plot(strmfl_merrie$ppty, strmfl_merrie$b_val)
# if(ppt_b_signif < .05) {
## abline(ppt_b)
# legend("topleft",
# legend=c(round(ppt_b_adjr, 3), round(ppt_b_slope,3)))
# }
} else {ppt_a_slope=NA ; ppt_a_adjr=NA ; ppt_a_signif=NA ; ppt_b_slope=NA ; ppt_b_adjr=NA ; ppt_b_signif=NA}

sm10_a = lm(strmfl_merrie$a_val ~ strmfl_merrie$sm10y)
sm10_a_slope = coef(summary(sm10_a))[2,1]
sm10_a_adjr = summary(sm10_a)$adj
sm10_a_signif = coef(summary(sm10_a))[2,4]
# plot(strmfl_merrie$sm10y, strmfl_merrie$a_val)
# if(sm10_a_signif < .05) {
# abline(sm10_a)
# legend("topright",
# legend=c(round(sm10_a_adjr, 3), round(sm10_a_slope,3)))
# }

sm10_b = lm(strmfl_merrie$b_val ~ strmfl_merrie$sm10y)
sm10_b_slope = coef(summary(sm10_b))[2,1]
sm10_b_adjr = summary(sm10_b)$adj
sm10_b_signif = coef(summary(sm10_b))[2,4]
# plot(strmfl_merrie$sm10y, strmfl_merrie$b_val)
# if(sm10_b_signif < .05) {
# abline(sm10_b)
# legend("topleft",
# legend=c(round(sm10_b_adjr, 3), round(sm10_b_slope,3)))
# }

if(diff(range(strmfl_merrie$sm40y)) > 0) { # sometimes soil moisture doesn't vary, so there's no slope; this exception keeps a error from popping out of the loop
sm40_a = lm(strmfl_merrie$a_val ~ strmfl_merrie$sm40y)
sm40_a_slope = coef(summary(sm40_a))[2,1]
sm40_a_adjr = summary(sm40_a)$adj
sm40_a_signif = coef(summary(sm40_a))[2,4]
# plot(strmfl_merrie$sm40y, strmfl_merrie$a_val)
# if(sm40_a_signif < .05) {
# abline(sm40_a)
# legend("topright",
# legend=c(round(sm40_a_adjr, 3), round(sm40_a_slope,3)))
# }

sm40_b = lm(strmfl_merrie$b_val ~ strmfl_merrie$sm40y)
sm40_b_slope = coef(summary(sm40_b))[2,1]
sm40_b_adjr = summary(sm40_b)$adj
sm40_b_signif = coef(summary(sm40_b))[2,4]
# plot(strmfl_merrie$sm40y, strmfl_merrie$b_val)
# if(sm40_b_signif < .05) {
# abline(sm40_b)
# legend("topleft",
# legend=c(round(sm40_b_adjr, 3), round(sm40_b_slope,3)))
# } 
} else {sm40_a_slope=NA ; sm40_a_adjr=NA ;sm40_a_signif=NA ;sm40_b_slope=NA ;sm40_b_adjr=NA ;sm40_b_signif=NA}

if(diff(range(strmfl_merrie$sm100y)) > 0) { # sometimes soil moisture doesn't vary, so there's no slope; this exception keeps a error from popping out of the loop
sm100_a = lm(strmfl_merrie$a_val ~ strmfl_merrie$sm100y)
sm100_a_slope = coef(summary(sm100_a))[2,1]
sm100_a_adjr = summary(sm100_a)$adj
sm100_a_signif = coef(summary(sm100_a))[2,4]
# plot(strmfl_merrie$sm100y, strmfl_merrie$a_val)
# if(sm100_a_signif < .05) {
# abline(sm100_a)
# legend("topright",
# legend=c(round(sm100_a_adjr, 3), round(sm100_a_slope,3)))
# }

sm100_b = lm(strmfl_merrie$b_val ~ strmfl_merrie$sm100y)
sm100_b_slope = coef(summary(sm100_b))[2,1]
sm100_b_adjr = summary(sm100_b)$adj
sm100_b_signif = coef(summary(sm100_b))[2,4]
# plot(strmfl_merrie$sm100y, strmfl_merrie$b_val)
# if(sm100_b_signif < .05) {
# abline(sm100_b)
# legend("topleft",
# legend=c(round(sm100_b_adjr, 3), round(sm100_b_slope,3)))
# }
} else {sm100_a_slope=NA ; sm100_a_adjr=NA ;sm100_a_signif=NA ;sm100_b_slope=NA ;sm100_b_adjr=NA ;sm100_b_signif=NA}


if(diff(range(sm200y$sm200y))>0) { # sometimes soil moisture doesn't vary, so there's no slope; this exception keeps a error from popping out of the loop
sm200_a = lm(strmfl_merrie$a_val ~ strmfl_merrie$sm200y)
sm200_a_slope = coef(summary(sm200_a))[2,1]
sm200_a_adjr = summary(sm200_a)$adj
sm200_a_signif = coef(summary(sm200_a))[2,4]
# plot(strmfl_merrie$sm200y, strmfl_merrie$a_val)
# if(sm200_a_signif < .05) {
# abline(sm200_a)
# legend("topright",
# legend=c(round(sm200_a_adjr, 3), round(sm200_a_slope,3)))
# }

sm200_b = lm(strmfl_merrie$b_val ~ strmfl_merrie$sm200y)
sm200_b_slope = coef(summary(sm200_b))[2,1]
sm200_b_adjr = summary(sm200_b)$adj
sm200_b_signif = coef(summary(sm200_b))[2,4]
# plot(strmfl_merrie$sm200y, strmfl_merrie$b_val)
# if(sm200_b_signif < .05) {
# abline(sm200_b)
# legend("topleft",
# legend=c(round(sm200_b_adjr, 3), round(sm200_b_slope,3)))
# }
} else {sm200_a_slope=NA ; sm200_a_adjr=NA ;sm200_a_signif=NA ;sm200_b_slope=NA ;sm200_b_adjr=NA ;sm200_b_signif=NA}


recess_char[run, "mevap_signif_a"] = evap_a_signif
recess_char[run, "mevap_signif_b"] = evap_b_signif
recess_char[run, "mevap_slope_a"] = evap_a_slope
recess_char[run, "mevap_slope_b"] = evap_b_slope
recess_char[run, "mevap_rsqr_a"] = evap_a_adjr
recess_char[run, "mevap_rsqr_b"] = evap_b_adjr

recess_char[run, "mppt_signif_a"] = ppt_a_signif
recess_char[run, "mppt_signif_b"] = ppt_b_signif
recess_char[run, "mppt_slope_a"] = ppt_a_slope
recess_char[run, "mppt_slope_b"] = ppt_b_slope
recess_char[run, "mppt_rsqr_a"] = ppt_a_adjr
recess_char[run, "mppt_rsqr_b"] = ppt_b_adjr

recess_char[run, "msm10_signif_a"] = sm10_a_signif
recess_char[run, "msm10_signif_b"] = sm10_b_signif
recess_char[run, "msm10_slope_a"] = sm10_a_slope
recess_char[run, "msm10_slope_b"] = sm10_b_slope
recess_char[run, "msm10_rsqr_a"] = sm10_a_adjr
recess_char[run, "msm10_rsqr_b"] = sm10_b_adjr

recess_char[run, "msm40_signif_a"] = sm40_a_signif
recess_char[run, "msm40_signif_b"] = sm40_b_signif
recess_char[run, "msm40_slope_a"] = sm40_a_slope
recess_char[run, "msm40_slope_b"] = sm40_b_slope
recess_char[run, "msm40_rsqr_a"] = sm40_a_adjr
recess_char[run, "msm40_rsqr_b"] = sm40_b_adjr

recess_char[run, "msm100_signif_a"] = sm100_a_signif
recess_char[run, "msm100_signif_b"] = sm100_b_signif
recess_char[run, "msm100_slope_a"] = sm100_a_slope
recess_char[run, "msm100_slope_b"] = sm100_b_slope
recess_char[run, "msm100_rsqr_a"] = sm100_a_adjr
recess_char[run, "msm100_rsqr_b"] = sm100_b_adjr

recess_char[run, "msm200_signif_a"] = sm200_a_signif
recess_char[run, "msm200_signif_b"] = sm200_b_signif
recess_char[run, "msm200_slope_a"] = sm200_a_slope
recess_char[run, "msm200_slope_b"] = sm200_b_slope
recess_char[run, "msm200_rsqr_a"] = sm200_a_adjr
recess_char[run, "msm200_rsqr_b"] = sm200_b_adjr


# again, for ppt with time lags

# ppty$days_since = as.numeric(difftime(ppty$Date, ppty$Date[1], units='days') + 1) 
# fit_lm_ppt = lm(ppty$ppty ~ sin(2*pi*ppty$days_since/365.25) + cos(2*pi*ppty$days_since/365.25))
# ppty$decor = ppty$ppty - fitted(fit_lm_ppt)

# plot(ppty$Date, ppty$ppty - fitted(fit_lm_ppt))
# lines(ppty$Date, fitted(fit_lm_ppt), col='blue') 

merry_lag = matrix(ncol=length(lags))
merry_lag = cbind(ppty$Date, data.frame(merry_lag))

names(merry_lag) = c("Date", paste(lags))
for (g in 1:length(lags)) {
for (h in 1:(length(merry_lag$Date)-lags[g])) {
merry_lag[h+lags[g],g+1] = sum(ppty$ppty[h:(h+30)]) # to decorrelate, be sure to also change ppty$ppty to ppty$decor
}
}

strmfl_merry_lag = merge(strmfl, merry_lag, by='Date')
for(this_lag in 1:length(lags)) {

if(any(!is.na(strmfl_merry_lag))) {
whichcol = 11+this_lag
whichrows = which(!is.na(strmfl_merry_lag[,whichcol,with=FALSE]))
if(abs(diff(range(unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE])))) > 0) {
lags_merry_a = lm(strmfl_merry_lag$a_val[whichrows] ~ unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE]))
lags_merry_a_slope = coef(summary(lags_merry_a))[2,1]
lags_merry_a_adjr = summary(lags_merry_a)$adj
lags_merry_a_signif = coef(summary(lags_merry_a))[2,4]
# plot(unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE]), strmfl_merry_lag$a_val[whichrows])
# if(lags_merry_a_signif < .05) {
# abline(lags_merry_a)
# legend("topright",
# legend=c(round(lags_merry_a_adjr, 3), round(lags_merry_a_slope,3)))
# }

lags_merry_b = lm(strmfl_merry_lag$b_val[whichrows] ~ unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE]))
lags_merry_b_slope = coef(summary(lags_merry_b))[2,1]
lags_merry_b_adjr = summary(lags_merry_b)$adj
lags_merry_b_signif = coef(summary(lags_merry_b))[2,4]
# plot(unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE]), strmfl_merry_lag$b_val[whichrows])
# if(lags_merry_b_signif < .05) {
# abline(lags_merry_b)
# legend("topleft",
# legend=c(round(lags_merry_b_adjr, 3), round(lags_merry_b_slope,3)))
# }
} 
}

recess_char[run, paste0("ppty_signif_a_", lags[this_lag])] = lags_merry_a_signif
recess_char[run, paste0("ppty_signif_b_", lags[this_lag])] = lags_merry_b_signif
recess_char[run, paste0("ppty_slope_a_", lags[this_lag])] = lags_merry_a_slope
recess_char[run, paste0("ppty_slope_b_", lags[this_lag])] = lags_merry_b_slope
recess_char[run, paste0("ppty_rsqr_a_", lags[this_lag])] = lags_merry_a_adjr
recess_char[run, paste0("ppty_rsqr_b_", lags[this_lag])] = lags_merry_b_adjr
}

# again, for evap with time lags

# evapy$days_since = as.numeric(difftime(evapy$Date, evapy$Date[1], units='days') + 1) 
# fit_lm_ppt = lm(evapy$evapy ~ sin(2*pi*evapy$days_since/365.25) + cos(2*pi*evapy$days_since/365.25))
# evapy$decor = evapy$evapy - fitted(fit_lm_ppt)

# plot(evapy$Date, evapy$evapy - fitted(fit_lm_ppt))
# lines(evapy$Date, fitted(fit_lm_ppt), col='blue') 

merry_lag = matrix(ncol=length(lags))
merry_lag = cbind(evapy$Date, data.frame(merry_lag))
names(merry_lag) = c("Date", paste(lags))
for (g in 1:length(lags)) {
for (h in 1:(length(merry_lag$Date)-lags[g])) {
merry_lag[h+lags[g],g+1] = sum(evapy$evapy[h:(h+30)])
}
}

strmfl_merry_lag = merge(strmfl, merry_lag, by='Date')
for(this_lag in 1:length(lags)) {

if(any(!is.na(strmfl_merry_lag))) {
whichcol = 11+this_lag
whichrows = which(!is.na(strmfl_merry_lag[,whichcol,with=FALSE]))
if(abs(diff(range(unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE])))) > 0) {
lags_merry_a = lm(strmfl_merry_lag$a_val[whichrows] ~ unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE]))
lags_merry_a_slope = coef(summary(lags_merry_a))[2,1]
lags_merry_a_adjr = summary(lags_merry_a)$adj
lags_merry_a_signif = coef(summary(lags_merry_a))[2,4]
# plot(unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE]), strmfl_merry_lag$a_val[whichrows])
# if(lags_merry_a_signif < .05) {
# abline(lags_merry_a)
# legend("topright",
# legend=c(round(lags_merry_a_adjr, 3), round(lags_merry_a_slope,3)))
# }

lags_merry_b = lm(strmfl_merry_lag$b_val[whichrows] ~ unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE]))
lags_merry_b_slope = coef(summary(lags_merry_b))[2,1]
lags_merry_b_adjr = summary(lags_merry_b)$adj
lags_merry_b_signif = coef(summary(lags_merry_b))[2,4]
# plot(unlist(strmfl_merry_lag[whichrows,whichcol,with=FALSE]), strmfl_merry_lag$b_val[whichrows])
# if(lags_merry_b_signif < .05) {
# abline(lags_merry_b)
# legend("topleft",
# legend=c(round(lags_merry_b_adjr, 3), round(lags_merry_b_slope,3)))
# }
} 
}

recess_char[run, paste0("evapy_signif_a_", lags[this_lag])] = lags_merry_a_signif
recess_char[run, paste0("evapy_signif_b_", lags[this_lag])] = lags_merry_b_signif
recess_char[run, paste0("evapy_slope_a_", lags[this_lag])] = lags_merry_a_slope
recess_char[run, paste0("evapy_slope_b_", lags[this_lag])] = lags_merry_b_slope
recess_char[run, paste0("evapy_rsqr_a_", lags[this_lag])] = lags_merry_a_adjr
recess_char[run, paste0("evapy_rsqr_b_", lags[this_lag])] = lags_merry_b_adjr
}








}
}
}
}    
}



setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2")#C:\\Users\\arikt\\OneDrive\\Documents\\PhD\\Research\\D2")
#write.csv(recess_char, "inclusive_gracie_et_merris_and_lags_and_all_years_31aug.csv") 

# recess_char = read.csv("inclusive_gracie_et_merris_and_lags_and_all_years_31aug.csv")#"all_w_hyst_et_bna_smoothed_inclusive_w_significance_and_trends.csv", colClasses = c("gage" = "character"))
 all_gages = read.csv("conterm_bas_classif.txt", colClasses = c("STAID" = "character", "AGGECOREGION" = "character")) #   read in the file
 ref_gages = which(all_gages$CLASS == "Ref")     #   identify which basins are chategorized as reference basins
 recess_char$gage = all_gages$STAID[ref_gages]



setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2\\spreadsheets-in-csv-format")#C:\\Users\\arikt\\OneDrive\\Documents\\PhD\\Research\\D2\\spreadsheets-in-csv-format")
basinid = read.csv("conterm_basinid.txt", colClasses = c("STAID" = "character"))
soils = read.csv("conterm_soils.txt", colClasses = c("STAID" = 'character'))
hydro = read.csv('conterm_hydro.txt', colClasses = c('STAID' = 'character'))
topo = read.csv('conterm_topo.txt', colClasses = c('STAID' = 'character'))


basin_chars = merge(recess_char, basinid, by.x='gage', by.y='STAID')
basin_chars = merge(basin_chars, soils, by.x='gage', by.y='STAID')
basin_chars = merge(basin_chars, hydro, by.x='gage', by.y='STAID')
basin_chars = merge(basin_chars, topo, by.x='gage', by.y='STAID')



###########################################################################################
##### Making Publishable Plots
###########################################################################################
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2\\images")
library(viridis)

#########################################################
#### Figure 1 what is recession?
#run = 1252 # selecting a specific event
strmfl[,c(2,3,4)] = strmfl[,c(2,3,4)] * conversion
strmfl$lg_dQ = log10(-strmfl$dQ)
strmfl$lg_Q = log10(strmfl$Q)
png(paste0("Example_recessions", ".png"), width=1200, height=1200)
plot(strmfl$lg_Q, strmfl$lg_dQ, 
xlim=c(-1.5,1.0), ylim = c(-3,1))
rect(par("usr")[1],par("usr")[3],par("usr")[2],par("usr")[4],col = "grey100")
points(strmfl$lg_Q, strmfl$lg_dQ, 
pch = 1, col='grey85', lwd = .1, cex=3)

the_cols = rev(viridis(7))[2:5]
the_symbs = c(0,2,5,6)
the_events = c(41,42,75,78) #c(75,78,39,40,41,42)  #c(39,40,41,42,44,61,62)#c(20,21,22,23,24)#c(8,14,17,18,19) #c(1,2,3,4,7)
iter = 0
for(i in the_events) {
iter=iter+1
strmfl_sub = subset(strmfl, event == i)
strmfl_sub = strmfl_sub[1:6,]
points(strmfl_sub$lg_Q, strmfl_sub$lg_dQ,
pch = the_symbs[iter], col=the_cols[iter], bg='grey50',lwd=4, cex=3.5)
}
dev.off()


#######################################################################
# new methods with sf
#######################################################################

library("ggplot2")
library("sf")
library("rnaturalearth") # for base map
library("rnaturalearthdata") # for downlading lakes and rivers data
library("ggspatial") # for scale bar

basin_chars$long = basin_chars$LNG_GAGE
basin_chars$lat = basin_chars$LAT_GAGE
bchars_sf = st_as_sf(subset(basin_chars, tot_events>49), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
crs = st_crs(4326))
#"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") 

lakes <- ne_download(scale = "medium", type = 'lakes', category = 'physical', returnclass="sf")
rivers <- ne_download(scale = "medium", type = 'rivers_lake_centerlines', category = 'physical', returnclass='sf')
world <- ne_countries(scale = "medium", returnclass = "sf")

the_base_map = 
ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = bchars_sf, aes(color=event_med_slope)) +
# scale_fill_viridis_c(option = "plasma", trans = "sqrt") +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.75, "in"), pad_y = unit(0.5, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw() 




#########################################################
#### Figure 2 Static variables

sdex = c(900000, 1030000, 1230000)
sdwy = c(-1900000, -1900000, -1900000)
legend_points = data.frame(sdex, sdwy) # for handmade legend for SD

#### median b, with variance
ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_sf, shape=16, alpha=0.7, aes(color=event_med_slope,  stroke=event_sd_slope*2)) +
geom_point(data=legend_points, color=plasma(5)[1], shape=16, alpha=0.7, aes(sdex, sdwy, stroke=c(1,5,10)*2) ) +
geom_text(data=legend_points, size=8, aes(sdex,sdwy-140000,label=c(1,5,10))) +
geom_text(data=legend_points, fontface='bold', size=8, aes(sdex[1]-135000,sdwy[1],label="SD")) +
geom_rect(data=legend_points, fill=NA, color='grey20',
aes(xmin=sdex[1]-230000, xmax=sdex[3]+118000, ymin=sdwy[1]-205000, ymax=sdwy[3]+118000)) +
scale_color_viridis_c(name="b",option = "plasma", trans='sqrt', end=.9) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.93,.28),
legend.title=element_text(face='bold', size=30),
legend.text=element_text(size=20),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("median_b_with_sd_new.png", width = 12, height = 12, dpi = 1200)

ggplot(bchars_sf, aes(x=1, y=event_med_slope)) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("b (nonlinearity)") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("median_b_violin.png", width = 5, height = 1.5, dpi = 1200)

ggplot(bchars_sf, aes(x=1, y=event_sd_slope)) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("SD of b") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("median_b_violin_sd.png", width = 5, height = 1.5, dpi = 1200)


#### median a, with variance
ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_sf, shape=16, alpha=0.7, aes(color=event_a_rmed,  stroke=event_sd_a*8)) +
geom_point(data=legend_points, color=plasma(5)[1], shape=16, alpha=0.7, aes(sdex, sdwy, stroke=c(.2,1,2)*8) ) +
geom_text(data=legend_points, size=8, aes(sdex,sdwy-140000,label=c(".1",1,2))) +
geom_text(data=legend_points, fontface='bold', size=8, aes(sdex[1]-135000,sdwy[1],label="SD")) +
geom_rect(data=legend_points, fill=NA, color='grey20',
aes(xmin=sdex[1]-230000, xmax=sdex[3]+118000, ymin=sdwy[1]-205000, ymax=sdwy[3]+118000)) +
scale_color_viridis_c(name="log(a)",option = "plasma", direction=-1, end=0.9) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.93,.28),
legend.title=element_text(face='bold', size=30),
legend.text=element_text(size=20),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("median_a_with_sd_new.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_sf, aes(x=1, y=event_a_rmed)) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("log(a)") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("median_a_violin.png", width = 5, height = 1.5, dpi = 1200)

ggplot(bchars_sf, aes(x=1, y=event_sd_a)) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("SD of log(a)") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("median_a_violin_sd.png", width = 5, height = 1.5, dpi = 1200)


#### point cloud b
#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = bchars_sf, shape=16, alpha=0.7, aes(color=allmod_slope, stroke=6)) +
# scale_color_viridis_c(option = "plasma", trans = "sqrt", end=.9) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("allmod_b_new.png", width = 12, height = 12, dpi = 1200)

#ggplot(bchars_sf, aes(x=1, y=allmod_slope)) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
#theme_classic()
#ggsave("allmod_b_violin.png", width = 1.5, height = 5, dpi = 1200)


#### % convexity
bchars_sf$pct_convex = 100 * bchars_sf$tot_convex / bchars_sf$tot_events
bchars_sf$pct_concav = 100 * bchars_sf$tot_concav / bchars_sf$tot_events
ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_sf, shape=16, alpha=0.7, aes(color=pct_convex,  stroke=5)) +
scale_color_viridis_c(name="% convex",option = "plasma", direction=1, end=0.9) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.93,.28),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=20),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("pct_convex_new.png", width = 12, height = 12, dpi = 1200)

ggplot(bchars_sf, aes(x=1, y=pct_convex)) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("% convex") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("pct_convex_violin.png", width = 5, height = 1.5, dpi = 1200)

#rsqrd = round(summary(lm(bchars_sf$event_med_slope ~ bchars_sf$pct_convex))$adj,3)
#ggplot(bchars_sf, aes(x=pct_convex, y=event_med_slope)) +
# geom_point(shape=4, colour='grey10', size=.5, stroke=1, alpha=.4) +
# geom_smooth(method = "lm", se=FALSE, color=plasma(10)[5]) +
# annotate('text', label=paste0("r", "^2 = ", rsqrd), x=.5, y=1.5, fontface='bold', color=plasma(10)[5]) +
# theme_classic()



#########################################################
#### Table 1 summary stats of static variables
keepers = which(basin_chars$tot_events > 50)
basin_chars$pct_convex = basin_chars$tot_convex / basin_chars$tot_events
table_out = matrix(NA, nrow=8, ncol=5)
row.names(table_out) = c("b_point_cloud", "b_event_median", "b_event_st.dev", 'b_seasonal_amplitude', 'log(a)_event_median', 'log(a)_event_st.dev', 'log(a)_seasonal_amplitude', 'percent_convex')
colnames(table_out) = c('1st_quart', 'median', 'mean', '3rd_quart', 'st_dev')

table_out[1,c(1,2,3,4)] = summary(basin_chars$allmod_slope[keepers])[c(2,3,4,5)]
table_out[1,5] = sd(basin_chars$allmod_slope[keepers])

table_out[2,c(1,2,3,4)] = summary(basin_chars$event_med_slope[keepers])[c(2,3,4,5)]
table_out[2,5] = sd(basin_chars$event_med_slope[keepers])

table_out[3,c(1,2,3,4)] = summary(basin_chars$event_sd_slope[keepers])[c(2,3,4,5)]
table_out[3,5] = sd(basin_chars$event_sd_slope[keepers])

table_out[4,c(1,2,3,4)] = summary(basin_chars$amp_b[keepers])[c(2,3,4,5)]
table_out[4,5] = sd(basin_chars$amp_b[keepers])

table_out[5,c(1,2,3,4)] = summary(basin_chars$event_a_rmed[keepers])[c(2,3,4,5)]
table_out[5,5] = sd(basin_chars$event_a_rmed[keepers])

table_out[6,c(1,2,3,4)] = summary(basin_chars$event_sd_a[keepers])[c(2,3,4,5)]
table_out[6,5] = sd(basin_chars$event_sd_a[keepers])

table_out[7,c(1,2,3,4)] = summary(basin_chars$amp_a[keepers])[c(2,3,4,5)]
table_out[7,5] = sd(basin_chars$amp_a[keepers])

table_out[8,c(1,2,3,4)] = summary(basin_chars$pct_convex[keepers])[c(2,3,4,5)]
table_out[8,5] = sd(basin_chars$pct_convex[keepers])

write.csv(table_out, "table_1.csv")
#summary(lm(basin_chars$pct_convex[keepers] ~ basin_chars$allmod_slope[keepers]))
#summary(lm(basin_chars$pct_convex[keepers] ~ log(basin_chars$allmod_slope[keepers])))

#summary(lm(basin_chars$pct_convex[keepers] ~ basin_chars$event_med_slope[keepers]))
#summary(lm(basin_chars$pct_convex[keepers] ~ log(basin_chars$event_med_slope[keepers])))

#summary(lm(basin_chars$pct_convex[keepers] ~ basin_chars$event_sd_slope[keepers]))
#summary(lm(basin_chars$pct_convex[keepers] ~ log(basin_chars$event_sd_slope[keepers])))

#summary(lm(basin_chars$pct_convex[keepers] ~ basin_chars$event_a_rmed[keepers]))
#summary(lm(basin_chars$pct_convex[keepers] ~ log(basin_chars$event_a_rmed[keepers])))

#summary(lm(basin_chars$pct_convex[keepers] ~ basin_chars$event_sd_a[keepers]))
#summary(lm(basin_chars$pct_convex[keepers] ~ log(basin_chars$event_sd_a[keepers])))


#########################################################
#### Figure 3 seasonality
#library(metR)
#coord_sf(datum = st_crs(2163)
#sf::st_coordinates(bchars_sf)
bchars_newcoords = st_transform(x = bchars_sf, crs = 2163)
long_coords = st_coordinates(bchars_newcoords)[,1]
lat_coords = st_coordinates(bchars_newcoords)[,2]
bchars_newcoords$long_coords = long_coords
bchars_newcoords$lat_coords = lat_coords

#Phase shift of a values
ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data=bchars_newcoords) +
# ggplot(bchars_newcoords) +
# geom_contour_fill(data=bchars_newcoords, aes(x=long_coords, y=lat_coords, z=amp_a)) +
# geom_contour(color = "black", size = 0.1)
# stat_density_2d(aes(fill = stat(level)), geom = "polygon") +
#geom_contour_fill(data = bchars_newcoords, aes(x = long_coords, y = lat_coords, z = amp_a), na.fill = TRUE, bins = 70) + 
  #geom_raster(data = bchars_newcoords, aes(x = long_coords, y = lat_coords, fill = amp_a), interpolate = FALSE)+
#   geom_point(data=bchars_newcoords, shape=15, size=5, aes(color=amp_a, x=long_coords , y=lat_coords), alpha=0.35) +
geom_segment(data=bchars_newcoords, size=1, alpha=0.7,
aes(x=long_coords , y=lat_coords, xend=long_coords + cos(phi_a)*70000, yend=lat_coords + sin(phi_a)*70000,
color=10^amp_a),
arrow=arrow(angle=20, length=unit(.20,'cm'), type='open')) +
scale_color_viridis_c(option = "plasma", trans='log10', begin=0, end=0.9, name="amp a", limits=c(1,100), na.value=plasma(10)[9]) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.93,.28),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=20),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("seasonality_a_new.png", width = 12, height = 12, dpi = 600)


ggplot(bchars_sf, aes(x=1, y=amp_a)) +
#geom_violin(lwd=1.5, trim = FALSE) + 
scale_y_continuous(limit=c(0,2.75)) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("amplitude of log(a)") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("seasonality_a_violin.png", width = 5, height = 1.5, dpi = 1200)


rsqrd = round(summary(lm(bchars_sf$event_sd_a ~ bchars_sf$amp_a))$adj,3)
ggplot(bchars_sf, aes(x=event_sd_a, y=amp_a)) +
geom_point(shape=4, colour='grey10', size=.5, stroke=1, alpha=.4) +
geom_smooth(method = "lm", se=FALSE, color=plasma(10)[5]) +
annotate('text', label=paste0("r", "^2 = ", rsqrd), x=.4, y=1.7, size=5, fontface='bold', color=plasma(10)[5]) +
ylab("SD log(a)") +
xlab("amplitude of log(a)") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title=element_text(size=15))
ggsave("seasonality_amp_pred_sd_a.png", width = 5, height = 1.5, dpi = 1200)




#Phase shift of Q
ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data=bchars_newcoords) +
# ggplot(bchars_newcoords) +
# geom_contour_fill(data=bchars_newcoords, aes(x=long_coords, y=lat_coords, z=amp_a)) +
# geom_contour(color = "black", size = 0.1)
# stat_density_2d(aes(fill = stat(level)), geom = "polygon") +
#geom_contour_fill(data = bchars_newcoords, aes(x = long_coords, y = lat_coords, z = amp_a), na.fill = TRUE, bins = 70) + 
  #geom_raster(data = bchars_newcoords, aes(x = long_coords, y = lat_coords, fill = amp_a), interpolate = FALSE)+
#   geom_point(data=bchars_newcoords, shape=15, size=5, aes(color=amp_a, x=long_coords , y=lat_coords), alpha=0.35) +
geom_segment(data=bchars_newcoords, size=1, alpha=0.7,aes(x=long_coords , y=lat_coords, xend=long_coords + cos(phi_Q+pi)*70000, yend=lat_coords + sin(phi_Q+pi)*70000, color=amp_Q),
arrow=arrow(angle=20, length=unit(.20,'cm'), type='open')) +
scale_color_viridis_c(option = "plasma", begin=0, end=0.9, trans='log10', name="amp Q", limits=c(.1,5), na.value=plasma(10)[1]) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.93,.28),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=20),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("seasonality_Q_new.png", width = 12, height = 12, dpi = 600)

ggplot(bchars_sf, aes(x=1, y=amp_Q)) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("amplitude of Q") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("seasonality_Q_violin.png", width = 5, height = 1.5, dpi = 1200)

rsqrd = round(summary(lm(bchars_sf$amp_Q ~ bchars_sf$amp_a))$adj,3)
ggplot(bchars_sf, aes(x=amp_Q, y=amp_a)) +
geom_point(shape=4, colour='grey10', size=.5, stroke=1, alpha=.4) +
geom_smooth(method = "lm", se=FALSE, color=plasma(10)[5]) +
annotate('text', label=paste0("r", "^2 = ", rsqrd), x=.4, y=1.7, size=5, fontface='bold', color=plasma(10)[5]) +
ylab("amp Q") +
xlab("amp log(a)") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title=element_text(size=15))
ggsave("seasonality_amp_of_Qvloga.png", width = 5, height = 1.5, dpi = 1200)



#Phase shift of b values
ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data=bchars_newcoords) +
# ggplot(bchars_newcoords) +
# geom_contour_fill(data=bchars_newcoords, aes(x=long_coords, y=lat_coords, z=amp_a)) +
# geom_contour(color = "black", size = 0.1)
# stat_density_2d(aes(fill = stat(level)), geom = "polygon") +
#geom_contour_fill(data = bchars_newcoords, aes(x = long_coords, y = lat_coords, z = amp_a), na.fill = TRUE, bins = 70) + 
  #geom_raster(data = bchars_newcoords, aes(x = long_coords, y = lat_coords, fill = amp_a), interpolate = FALSE)+
#   geom_point(data=bchars_newcoords, shape=15, size=5, aes(color=amp_a, x=long_coords , y=lat_coords), alpha=0.35) +
geom_segment(data=bchars_newcoords, size=1, alpha=0.7, aes(x=long_coords , y=lat_coords, xend=long_coords + cos(phi_b+pi)*70000, yend=lat_coords + sin(phi_b+pi)*70000, color=amp_b),
arrow=arrow(angle=20, length=unit(.20,'cm'), type='open')) +
scale_color_viridis_c(option = "plasma", begin=0, end=0.9, name='amp b', limits=c(.1,5),trans='log10', na.value=plasma(10)[1]) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.93,.28),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=20),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("seasonality_b_new.png", width = 12, height = 12, dpi = 600)

ggplot(bchars_sf, aes(x=1, y=amp_b)) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("amplitude of b") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("seasonality_b_violin.png", width = 5, height = 1.5, dpi = 1200)


rsqrd = round(summary(lm(bchars_sf$event_sd_slope ~ bchars_sf$amp_b))$adj,3)
ggplot(bchars_sf, aes(x=amp_b, y=event_sd_slope)) +
geom_point(shape=4, colour='grey10', size=.5, stroke=1, alpha=.4) +
geom_smooth(method = "lm", se=FALSE, color=plasma(10)[5]) +
annotate('text', label=paste0("r", "^2 = ", rsqrd), x=2.5, y=7, size=5, fontface='bold', color=plasma(10)[5]) +
ylab("SD of b") +
xlab("amplitude of b") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title=element_text(size=15))
ggsave("seasonality_amp_pred_sd_b.png", width = 5, height = 1.5, dpi = 1200)


#Density plot of phase of each metric
month_labs = c("Jan", "Feb", "Mar", "Apr","May", "Jun","Jul","Aug","Sep","Oct","Nov","Dec")
#month_locs = seq(-.99,0.833,length.out=12)
month_locs = seq(-3.1,pi-pi/6,length.out=12)
#month_tick_locs = seq(-1,1,length.out=7)
bchars_sf$phi_a_shift = bchars_sf$phi_a + pi
bchars_sf$phi_a_shift[which(bchars_sf$phi_a_shift > pi)] = pi - bchars_sf$phi_a_shift[which(bchars_sf$phi_a_shift > pi)]


ggplot(bchars_sf) +
stat_density(geom='line', lwd=2, lty=2, aes(x=phi_a_shift), color=plasma(10)[2], adjust=1) +#, kernal="triangular", from=-1, to=1, adjust=0.000001) +
stat_density(geom='line', lwd=2, lty=3, aes(x=phi_b), color=plasma(10)[5], adjust=1) +
stat_density(geom='line', lwd=2, lty=1, aes(x=phi_Q), color=plasma(10)[8], adjust=1) +
annotate('text', label=paste0("a"), x=-.5, y=1.25, fontface='bold', color=plasma(10)[2], size=10) +
annotate('text', label=paste0("b"), x=-.5, y=1.10, fontface='bold', color=plasma(10)[5], size=10) +
annotate('text', label=paste0("Q"), x=-.5, y=0.95, fontface='bold', color=plasma(10)[8],size=10) +
annotate('segment', x=-1.5,xend=-.7, y=1.25, yend=1.25, color=plasma(10)[2], lwd=2, lty=2) +
annotate('segment', x=-1.5,xend=-.7, y=1.10, yend=1.10, color=plasma(10)[5], lwd=2, lty=3) +
annotate('segment', x=-1.5,xend=-.7, y=0.95, yend=0.95, color=plasma(10)[8], lwd=2, lty=1) +
scale_x_continuous(breaks = month_locs, labels = month_labs, expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
expand_limits(y=c(0,1.7)) +
theme_classic() +
theme(axis.title.x=element_blank()) + 
theme(axis.title.y=element_blank()) + 
# theme(axis.ticks.x=element_blank()) + 
# theme(axis.ticks.y=element_blank()) + 
theme(axis.text.x = element_text(color = "grey5", size = 20, angle = 45, hjust = .20, vjust = .25, face = "bold")) +
theme(axis.text.y = element_text(color = "grey5", size = 20, angle = 0, hjust = .5, vjust = 0, face = "bold"))


ggsave("seasonality_phi_density.png", width = 6, height = 6, dpi = 1200)



################# Figure 3 cont - specific values to use in text
# How much earlier/later is streamflow stability minima in northern vs southern west coast and east coast
# identifying subsets of watersheds on the west coast
pacnw = subset(subset(subset(subset(bchars_newcoords, lat>45), lat<50), long< (-119)), long>(-140))
ncal = subset(subset(subset(subset(bchars_newcoords, lat>40), lat<45), long< (-119)), long>(-140))
scal = subset(subset(subset(subset(bchars_newcoords, lat>34), lat<40), long< (-119)), long>(-140))

# converting phase shift ot number of days
median(pacnw$phi_a * 365 / (2*pi)) ; median(pacnw$lat)
median(ncal$phi_a* 365 / (2*pi)) ; median(ncal$lat)
median(scal$phi_a* 365 / (2*pi)) ; median(scal$lat)

# identifying subsets of watersheds on the west coast
neweng = subset(subset(subset(subset(bchars_newcoords, lat>40), lat<45), long< (-72)), long>(-75))
midatl = subset(subset(subset(subset(bchars_newcoords, lat>35), lat<40), long< (-72)), long>(-78))
seast = subset(subset(subset(subset(bchars_newcoords, lat>30), lat<35), long< (-72)), long>(-82))
flor = subset(subset(subset(subset(bchars_newcoords, lat>25), lat<30), long< (-72)), long>(-85))

# converting phase shift ot number of days
median(neweng$phi_a * 365 / (2*pi)) ; median(neweng$lat)
median(midatl$phi_a* 365 / (2*pi)) ; median(midatl$lat)
median(seast$phi_a* 365 / (2*pi)) ; median(seast$lat)
median(flor$phi_a* 365 / (2*pi)) ; median(flor$lat)

# which basins do not have a significant seasonal signal
bchars_newcoords$seasonal_signif = 0
bchars_newcoords$seasonal_signif[which(bchars_newcoords$sinsignif_a>0.05)] = 1







#########################################################
#### Figure 4 interdecadal changes
min_pval = 0.003 # significance, how about at 3 sigma?
bchars_sf$tot_years = difftime(bchars_sf$last_date_recess, bchars_sf$first_date_recess, units='days') / 365.25
#intedecadal changes in a
bchars_decadal = subset(subset(subset(bchars_sf, pre_sinsignif_a < min_pval), post_sinsignif_a < min_pval), signif_pre_post_a < min_pval)

dcex = c(720000, 860000, 1020000, 1240000)
dcwy = c(-1920000, -1920000, -1920000, -1920000)
legend_points = data.frame(dcex, dcwy) # for handmade legend for decadal changes

#### change in modmean_a
bchars_decadal$pos = 'increase'
bchars_decadal$pos[which(bchars_decadal$post_modmean_a > bchars_decadal$pre_modmean_a)] = 'decrease'
bchars_decadal$modmean_change = abs(10^bchars_decadal$post_modmean_a - 10^bchars_decadal$pre_modmean_a)
bchars_decadal$modmean_decadal_change = bchars_decadal$modmean_change * 10 / (.5*as.numeric(bchars_decadal$tot_years))
bchars_decadal$modmean_decadal_change_val = (10^bchars_decadal$post_modmean_a - 10^bchars_decadal$pre_modmean_a) * 10 / (.5*as.numeric(bchars_decadal$tot_years))


ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_decadal, shape=16, alpha=.7, aes(stroke=(modmean_decadal_change^.2)*10, color=pos)) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,1,10,100)^.2)*10 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1',1,10,100))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[3],dcwy[1]+170000,label="change per decade")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name=NULL, values = rev(c(plasma(10)[2], plasma(10)[8]))) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.91,.28),
# legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=24, face='bold'),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("pre_v_post_a_new.png", width = 12, height = 12, dpi = 1200)


#ggplot(bchars_decadal, aes(x=1, y=post_modmean_a - pre_modmean_a)) +
#expand_limits(y = c(-2,2)) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
# geom_violin(lwd=1.5, trim = FALSE) + 
# coord_flip() +
# theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
# panel.grid.minor=element_blank(),
# axis.text=element_text(size=15),
# axis.title.y=element_blank(),
# axis.title.x=element_text(size=18))
#ggsave("pre_v_post_a_modmean.png", width = 1.5, height = 5, dpi = 1200)

#bchars_decadal = subset(subset(subset(bchars_sf, pre_sinsignif_a < min_pval), post_sinsignif_a < min_pval), signif_pre_post_a < min_pval)
#bchars_decadal = bchars_decadal[-169,] # one weird outlier throws plots off...

#### change in amp_a
#bchars_decadal$pos = 'decrease'
#bchars_decadal$pos[which(bchars_decadal$post_amp_a > bchars_decadal$pre_amp_a)] = 'increase'
#bchars_decadal$amplitude_a_change = sqrt(abs(bchars_decadal$post_amp_a - bchars_decadal$pre_amp_a))*10

#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = bchars_decadal, shape=16, alpha=.7, aes(stroke=amplitude_a_change, color=pos)) +
# scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("pre_v_post_amp_a.png", width = 12, height = 12, dpi = 1200)


#ggplot(bchars_decadal, aes(x=1, y=modmean_decadal_change_val)) +
#ylim(c(-1,)) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
#theme_classic()
#ggsave("pre_v_post_a_amp.png", width = 1.5, height = 5, dpi = 1200)



#intedecadal changes in b
bchars_decadal = subset(subset(subset(bchars_sf, pre_sinsignif_b < min_pval), post_sinsignif_b < min_pval), signif_pre_post_b < min_pval)

#### change in modmean_b
bchars_decadal$pos = 'decrease'
bchars_decadal$pos[which(bchars_decadal$post_modmean_b > bchars_decadal$pre_modmean_b)] = 'increase'
bchars_decadal$modmean_change = abs(bchars_decadal$post_modmean_b - bchars_decadal$pre_modmean_b)
bchars_decadal$modmean_decadal_change = bchars_decadal$modmean_change * 10 / (.5*as.numeric(bchars_decadal$tot_years))
bchars_decadal$modmean_decadal_change_val = (bchars_decadal$post_modmean_b - bchars_decadal$pre_modmean_b) * 10 / (.5*as.numeric(bchars_decadal$tot_years))


ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_decadal, shape=16, alpha=.7, aes(stroke=(modmean_decadal_change^.5)*15, color=pos)) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.2,1,2)^.5)*15 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1,2))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[3],dcwy[1]+170000,label="change per decade")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name=NULL, values = rev(c(plasma(10)[2], plasma(10)[8]))) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.915,.28),
# legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=24, face='bold'),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("pre_v_post_b_new.png", width = 12, height = 12, dpi = 1200)


#### change in amp_b
#bchars_decadal$pos = 'decrease'
#bchars_decadal$pos[which(bchars_decadal$post_amp_b > bchars_decadal$pre_amp_b)] = 'increase'
#bchars_decadal$amplitude_b_change = sqrt(abs(bchars_decadal$post_amp_b - bchars_decadal$pre_amp_b))*7

#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = bchars_decadal, shape=16, alpha=.7, aes(stroke=amplitude_b_change, color=pos)) +
# scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("pre_v_post_amp_b.png", width = 12, height = 12, dpi = 1200)


#ggplot(bchars_decadal, aes(x=1, y=post_amp_b - pre_amp_b)) +
#expand_limits(y = c(-10,10)) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
#theme_classic()
#ggsave("pre_v_post_b_amp.png", width = 1.5, height = 5, dpi = 1200)



#intedecadal changes in Q
bchars_decadal = subset(subset(subset(bchars_sf, pre_sinsignif_Q < min_pval), post_sinsignif_Q < min_pval), signif_pre_post_Q < min_pval)
#bchars_decadal = bchars_decadal[-170,] # one weird outlier throws plots off...

#### change in modmean_Q
bchars_decadal$pos = 'decrease'
bchars_decadal$pos[which(bchars_decadal$post_modmean_Q > bchars_decadal$pre_modmean_Q)] = 'increase'

#### change in modmean_Q
bchars_decadal$modmean_change = abs(bchars_decadal$post_modmean_Q - bchars_decadal$pre_modmean_Q)
bchars_decadal$modmean_decadal_change = bchars_decadal$modmean_change * 10 / (.5*as.numeric(bchars_decadal$tot_years))
bchars_decadal$modmean_decadal_change_val = (bchars_decadal$post_modmean_Q - bchars_decadal$pre_modmean_Q) * 10 / (.5*as.numeric(bchars_decadal$tot_years))




ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_decadal, shape=16, alpha=.7, aes(stroke=(modmean_decadal_change^.5)*25, color=pos)) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.2,.5,1)^.5)*25 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.2','.5',1))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[3],dcwy[1]+170000,label="change per decade")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name=NULL, values = rev(c(plasma(10)[2], plasma(10)[8]))) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.915,.28),
# legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=24, face='bold'),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("pre_v_post_Q_new.png", width = 12, height = 12, dpi = 1200)


#ggplot(bchars_decadal, aes(x=1, y=post_modmean_Q - pre_modmean_Q)) +
#expand_limits(y = c(-6,6)) +
#geom_violin(lwd=1.5, trim = FALSE) + 
##scale_y_log10() +
#theme_classic()
#ggsave("pre_v_post_Q_modmean.png", width = 1.5, height = 5, dpi = 1200)


#### change in amp_Q
#bchars_decadal$pos = 'decrease'
#bchars_decadal$pos[which(bchars_decadal$post_amp_Q > bchars_decadal$pre_amp_Q)] = 'increase'
#bchars_decadal$amplitude_Q_change = (abs(bchars_decadal$post_amp_Q - bchars_decadal$pre_amp_Q)^.3)*10

#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = bchars_decadal, shape=16, alpha=.7, aes(stroke=amplitude_Q_change, color=pos)) +
# scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("pre_v_post_amp_Q.png", width = 12, height = 12, dpi = 1200)


#ggplot(bchars_decadal, aes(x=1, y=post_amp_Q - pre_amp_Q)) +
#expand_limits(y = c(-7,7)) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
#theme_classic()
#ggsave("pre_v_post_Q_amp.png", width = 1.5, height = 5, dpi = 1200)



# Figure 4 cont - giving a graphic display of changes, and relating specific values for the text
# defining regions by huc2
southeast = c("03","06")
texasplus = c("11", "12", "08")
southwest = c("16", "15", "13", "14")
california = c("18")
west=c("18","16", "15", "13", "14")
northwest = c("17")
northeast = c("01", "02")
midwest = c("05","04")
greatplains = c("07","09","10L","10U")
allregions = list(northwest,greatplains,midwest,northeast,west,texasplus,southeast)
allregions=list("01","02","03","04","05","06","07","08")
allregions=list("09","10L","10U","11","12","15","17","18")

png("pre_v_post_ex_hydrographs.png", width = 800, height = 600)
par(mfrow=c(2,4), cex=1.5, mai=c(.6,.6,.1,.1))
for(reg in 1:length(allregions)) {
theregion = subset(bchars_newcoords, HUC02 %in% allregions[[reg]])
Qo = median(theregion$modmean_Q)

b = median(theregion$pre_modmean_b, na.rm=TRUE)
a = median(theregion$pre_modmean_a, na.rm=TRUE)
Q = Qo
for(i in 1:30) {
Q[i+1] = (Qo^(1-b) - (1-b)*10^(a)*i)^(1/(1-b))
}
plot(Q,ylim = c(0,Qo), col='grey50', type='l', lwd=5)
# plot(Q, col='grey50', type='l', lwd=5)
preQ = sum(Q)

b = median(theregion$post_modmean_b, na.rm=TRUE)
a = median(theregion$post_modmean_a, na.rm=TRUE)
Q = Qo
for(i in 1:30) {
Q[i+1] = (Qo^(1-b) - (1-b)*10^(a)*i)^(1/(1-b))
}
postQ = sum(Q)
newcol = ifelse(preQ > postQ, plasma(10)[8], plasma(10)[2])
lines(Q, col=newcol, lwd=5, lty=2)
print(nrow(theregion))
}
dev.off()


#########################################################
#### Table 2 summary stats of static variables
table_out = matrix(NA, nrow=6, ncol=5)
row.names(table_out) = c("a_modmean", "a_amp", "Q_modmean", 'Q_amp', 'b_modmean', 'b_amp')
colnames(table_out) = c('1st_quart', 'median', 'mean', '3rd_quart', 'st_dev')

keepers = subset(subset(subset(bchars_sf, pre_sinsignif_a < min_pval), post_sinsignif_a < min_pval), signif_pre_post_a < min_pval) ; keepers = keepers[-c(169,348),]
table_out[1,c(1,2,3,4)] = summary((10^keepers$post_modmean_a - 10^keepers$pre_modmean_a) * 10 / (.5*as.numeric(keepers$tot_years)))[c(2,3,4,5)]
table_out[1,5] = sd((10^keepers$post_modmean_a - 10^keepers$pre_modmean_a) * 10 / (.5*as.numeric(keepers$tot_years)))

table_out[2,c(1,2,3,4)] = summary((10^keepers$post_amp_a - 10^keepers$pre_amp_a) * 10 / (.5*as.numeric(keepers$tot_years)))[c(2,3,4,5)]
table_out[2,5] = sd((10^keepers$post_amp_a - 10^keepers$pre_amp_a) * 10 / (.5*as.numeric(keepers$tot_years)))

keepers = subset(subset(subset(bchars_sf, pre_sinsignif_Q < min_pval), post_sinsignif_Q < min_pval), signif_pre_post_Q < min_pval)
table_out[3,c(1,2,3,4)] = summary((keepers$post_modmean_Q - keepers$pre_modmean_Q) * 10 / (.5*as.numeric(keepers$tot_years)))[c(2,3,4,5)]
table_out[3,5] = sd((keepers$post_modmean_Q - keepers$pre_modmean_Q) * 10 / (.5*as.numeric(keepers$tot_years)))

table_out[4,c(1,2,3,4)] = summary((keepers$post_amp_Q - keepers$pre_amp_Q) * 10 / (.5*as.numeric(keepers$tot_years)))[c(2,3,4,5)]
table_out[4,5] = sd((keepers$post_amp_Q - keepers$pre_amp_Q) * 10 / (.5*as.numeric(keepers$tot_years)))

keepers = subset(subset(subset(bchars_sf, pre_sinsignif_b < min_pval), post_sinsignif_b < min_pval), signif_pre_post_b < min_pval)
table_out[5,c(1,2,3,4)] = summary((keepers$post_modmean_b - keepers$pre_modmean_b) * 10 / (.5*as.numeric(keepers$tot_years)))[c(2,3,4,5)]
table_out[5,5] = sd((keepers$post_modmean_b - keepers$pre_modmean_b) * 10 / (.5*as.numeric(keepers$tot_years)))

table_out[6,c(1,2,3,4)] = summary((keepers$post_amp_b - keepers$pre_amp_b) * 10 / (.5*as.numeric(keepers$tot_years)))[c(2,3,4,5)]
table_out[6,5] = sd((keepers$post_amp_b - keepers$pre_amp_b) * 10 / (.5*as.numeric(keepers$tot_years)))


write.csv(table_out, "table_2.csv")

#for comparing the magnitude of change in either direction
keepers = subset(subset(subset(bchars_sf, pre_sinsignif_b < min_pval), post_sinsignif_b < min_pval), signif_pre_post_b < min_pval)
greater = subset(keepers, pre_modmean_b < post_modmean_b)
summary((greater$post_modmean_b - greater$pre_modmean_b) * 10 / (.5*as.numeric(greater$tot_years)))[c(2,3,4,5)]
sd((greater$post_modmean_b - greater$pre_modmean_b) * 10 / (.5*as.numeric(greater$tot_years)))

lesser = subset(keepers, pre_modmean_b > post_modmean_b)
summary((lesser$post_modmean_b - lesser$pre_modmean_b) * 10 / (.5*as.numeric(lesser$tot_years)))[c(2,3,4,5)]
sd((lesser$post_modmean_b - lesser$pre_modmean_b) * 10 / (.5*as.numeric(lesser$tot_years)))











#########################################################
#########################################################
#########################################################
#### Figure 5 rsqrs of best time lags
basin_chars$long = basin_chars$LNG_GAGE
basin_chars$lat = basin_chars$LAT_GAGE

dcex = c(860000, 1020000, 1240000)
dcwy = c(-1920000, -1920000, -1920000)
legend_points = data.frame(dcex, dcwy) # for handmade legend for decadal changes


##########################################
## identifying the most explicative time lag
## (positive relationship)
model_lags_all = basin_chars
## for a
## with gracie
# model_rsqrs = which(names(basin_chars) == "gracie_rsqr_a")
# model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "gracie_rsqr_a_30"), by=6, length=12))
# model_slopes = which(names(basin_chars) == "gracie_slope_a")
## model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "gracie_slope_a_30"), by=6, length=12))
# model_slope_df = basin_chars[,model_slopes_cols]
# model_rsqr_df = basin_chars[,model_rsqr_cols]
# model_rsqr_df_pos = model_rsqr_df
# for (i in 1:13) {
# negs = which(model_slope_df[,i] < 0)
# model_rsqr_df_pos[negs,i] = NA
# }
# max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
# bchars_modellags = basin_chars
## bchars_modellags$pos_val = max_value_lags
# bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

# bchars_modellags$bestest = NA
# for(i in 1:nrow(bchars_modellags)) {
# these_ens = as.vector(model_rsqr_df_pos[i,])
# if(any(!is.na(these_ens))) {
# bchars_modellags$bestest[i] = which.max(these_ens)
# }
# }

## modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
# crs = st_crs(4326))
#"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") 

#bchars_newcoords = st_transform(x = modellags_sf, crs = 2163)
#long_coords = st_coordinates(bchars_newcoords)[,1]
#lat_coords = st_coordinates(bchars_newcoords)[,2]
#bchars_newcoords$long_coords = long_coords
#bchars_newcoords$lat_coords = lat_coords
# using arrows... don't really like it 
#pi_norm = 13 / (2*pi)
#bchars_newcoords$pi_normed = bchars_newcoords$bestest / pi_norm
#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_segment(data=bchars_newcoords, size=0.5, aes(x=long_coords , y=lat_coords, xend=long_coords + cos(pi_normed)*70000, yend=lat_coords + sin(pi_normed)*70000, color=pos_val),
# arrow=arrow(angle=20, length=unit(.20,'cm'), type='open')) +
# scale_color_viridis_c(option = "plasma", end=0.9, limits=c(0,1), na.value=plasma(10)[1]) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("fitted_lagged_gracie_a.png", width = 12, height = 12, dpi = 1200)

#
#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^1)*15, color=factor(bestest))) +
# geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.5,1)^1)*15 )) +
# geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1))) +
# geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[3],dcwy[1]+170000,label="r-squared")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
# scale_color_manual(values = c(plasma(14)[1:13])) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
## pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme(legend.background=element_blank(), 
# legend.position=c(.91,.28),
# legend.title=element_text(face='bold', size=20),
# legend.text=element_text(size=24, face='bold'),
# panel.background=NULL ,
# panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
# panel.border=element_rect(fill=NA),
# axis.title=element_blank(),
# axis.text=element_text(size=20)) 


# ggplot(modellags_sf, aes(x=1, y=pos_val)) +
# ylim(0,1) +
# geom_violin(lwd=1.5, trim = FALSE) + 
# theme_classic()
# ggsave("fitted_lagged_gracie_a_violin.png", width = 1.5, height = 5, dpi = 1200)


##########################################
##########################################
## identifying the most explicative time lag
## (negative relationship)
## for a
## with gracie
model_rsqrs = which(names(basin_chars) == "gracie_rsqr_a")
model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "gracie_rsqr_a_30"), by=6, length=12))
model_slopes = which(names(basin_chars) == "gracie_slope_a")
model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "gracie_slope_a_30"), by=6, length=12))
model_slope_df = basin_chars[,model_slopes_cols]
model_rsqr_df = basin_chars[,model_rsqr_cols]
model_rsqr_df_pos = model_rsqr_df
for (i in 1:13) {
negs = which(model_slope_df[,i] > 0)
model_rsqr_df_pos[negs,i] = NA
}
max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
bchars_modellags = basin_chars
bchars_modellags$pos_val = max_value_lags
bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

bchars_modellags$bestest = NA
for(i in 1:nrow(bchars_modellags)) {
these_ens = as.vector(model_rsqr_df_pos[i,])
if(any(!is.na(these_ens))) {
bchars_modellags$bestest[i] = which.max(these_ens)
}
}

############################## for making densit plots later
model_lags_all$a_gracie_val = bchars_modellags$pos_val
model_lags_all$a_gracie_month = bchars_modellags$bestest


modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
crs = st_crs(4326))
#"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") 


ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^1)*15, color=factor(bestest))) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.5,1)^1)*15 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[2],dcwy[1]+170000,label="r-squared")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name="lag", values = c(plasma(14)[1:13]), labels=c(0,1,2,3,4,5,6,7,8,9,10,11,12)) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.95,.35),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=18),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 

ggsave("fitted_lagged_gracie_a_neg_new.png", width = 12, height = 12, dpi = 1200)


ggplot(modellags_sf, aes(x=1, y=pos_val)) +
ylim(0,1) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("r-squared") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("fitted_lagged_gracie_a_violin_neg.png", width = 5, height = 1.5, dpi = 1200)



##########################################
##########################################
## identifying the most explicative time lag
## (positive relationship)
## for b
## with gracie
model_rsqrs = which(names(basin_chars) == "gracie_rsqr_b")
model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "gracie_rsqr_b_30"), by=6, length=12))
model_slopes = which(names(basin_chars) == "gracie_slope_b")
model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "gracie_slope_b_30"), by=6, length=12))
model_slope_df = basin_chars[,model_slopes_cols]
model_rsqr_df = basin_chars[,model_rsqr_cols]
model_rsqr_df_pos = model_rsqr_df
for (i in 1:13) {
negs = which(model_slope_df[,i] < 0)
model_rsqr_df_pos[negs,i] = NA
}
max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
bchars_modellags = basin_chars
bchars_modellags$pos_val = max_value_lags
bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

bchars_modellags$bestest = NA
for(i in 1:nrow(bchars_modellags)) {
these_ens = as.vector(model_rsqr_df_pos[i,])
if(any(!is.na(these_ens))) {
bchars_modellags$bestest[i] = which.max(these_ens)
}
}

modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
crs = st_crs(4326))


ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^1)*15, color=factor(bestest))) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.5,1)^1)*15 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[2],dcwy[1]+170000,label="r-squared")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name="lag", values = c(plasma(14)[1:13]), labels=c(0,1,2,3,4,5,6,7,8,9,10,11,12)) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.95,.35),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=18),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("fitted_lagged_gracie_b_new.png", width = 12, height = 12, dpi = 1200)


ggplot(modellags_sf, aes(x=1, y=pos_val)) +
ylim(0,1) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("r-squared") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("fitted_lagged_gracie_b_violin.png", width = 5, height = 1.5, dpi = 1200)


##########################################
##########################################
## identifying the most explicative time lag
## (negative relationship)
## for b
## with gracie
#model_rsqrs = which(names(basin_chars) == "gracie_rsqr_b")
#model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "gracie_rsqr_b_30"), by=6, length=12))
#model_slopes = which(names(basin_chars) == "gracie_slope_b")
#model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "gracie_slope_b_30"), by=6, length=12))
#model_slope_df = basin_chars[,model_slopes_cols]
#model_rsqr_df = basin_chars[,model_rsqr_cols]
#model_rsqr_df_pos = model_rsqr_df
#for (i in 1:13) {
# negs = which(model_slope_df[,i] > 0)
# model_rsqr_df_pos[negs,i] = NA
#}
#max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
#bchars_modellags = basin_chars
#bchars_modellags$pos_val = max_value_lags
#bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

#bchars_modellags$bestest = NA
#for(i in 1:nrow(bchars_modellags)) {
# these_ens = as.vector(model_rsqr_df_pos[i,])
# if(any(!is.na(these_ens))) {
# bchars_modellags$bestest[i] = which.max(these_ens)
# }
#}


############################## for making densit plots later
#model_lags_all$b_gracie_val = bchars_modellags$pos_val
#model_lags_all$b_gracie_month = bchars_modellags$bestest


#modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
# crs = st_crs(4326))
#"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") 

#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
## geom_sf(data=lakes, fill='white', color='grey92') +
#geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^.75) *10, color=factor(bestest))) +
# scale_color_manual(values = c(plasma(14)[1:13])) +
# scale_color_viridis_c(option = "plasma", end=0.9, limits=c(1,13), na.value=plasma(10)[1]) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("fitted_lagged_gracie_b_neg.png", width = 12, height = 12, dpi = 1200)


#ggplot(modellags_sf, aes(x=1, y=pos_val)) +
#ylim(0,1) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#theme_classic()
#ggsave("fitted_lagged_gracie_b_violin_neg.png", width = 1.5, height = 5, dpi = 1200)


##########################################
##########################################
## identifying the most explicative time lag
## (positive relationship)
## for a
## with mppt
#model_rsqrs = which(names(basin_chars) == "mppt_rsqr_a")
#model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "ppty_rsqr_a_30"), by=6, length=12))
#model_slopes = which(names(basin_chars) == "mppt_slope_a")
#model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "ppty_slope_a_30"), by=6, length=12))
#model_slope_df = basin_chars[,model_slopes_cols]
#model_rsqr_df = basin_chars[,model_rsqr_cols]
#model_rsqr_df_pos = model_rsqr_df
#for (i in 1:13) {
# negs = which(model_slope_df[,i] < 0)
# model_rsqr_df_pos[negs,i] = NA
#}
#max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
#bchars_modellags = basin_chars
#bchars_modellags$pos_val = max_value_lags
#bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

#bchars_modellags$bestest = NA
#for(i in 1:nrow(bchars_modellags)) {
# these_ens = as.vector(model_rsqr_df_pos[i,])
# if(any(!is.na(these_ens))) {
# bchars_modellags$bestest[i] = which.max(these_ens)
# }
#}

#modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
# crs = st_crs(4326))

#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^.75) *10, color=factor(bestest))) +
# scale_color_manual(values = c(plasma(14)[1:13])) +
# scale_color_viridis_c(option = "plasma", end=0.9, limits=c(1,13), na.value=plasma(10)[1]) +
## coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
#annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("fitted_lagged_mppt_a.png", width = 12, height = 12, dpi = 1200)

#ggplot(modellags_sf, aes(x=1, y=pos_val)) +
#ylim(0,1) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#theme_classic()
#ggsave("fitted_lagged_mppt_a_violin.png", width = 1.5, height = 5, dpi = 1200)


##########################################
##########################################
## identifying the most explicative time lag
## (negative relationship)
## for a
## with mppt
model_rsqrs = which(names(basin_chars) == "mppt_rsqr_a")
model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "ppty_rsqr_a_30"), by=6, length=12))
model_slopes = which(names(basin_chars) == "mppt_slope_a")
model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "ppty_slope_a_30"), by=6, length=12))
model_slope_df = basin_chars[,model_slopes_cols]
model_rsqr_df = basin_chars[,model_rsqr_cols]
model_rsqr_df_pos = model_rsqr_df
for (i in 1:13) {
negs = which(model_slope_df[,i] > 0)
model_rsqr_df_pos[negs,i] = NA
}
max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
bchars_modellags = basin_chars
bchars_modellags$pos_val = max_value_lags
bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

bchars_modellags$bestest = NA
for(i in 1:nrow(bchars_modellags)) {
these_ens = as.vector(model_rsqr_df_pos[i,])
if(any(!is.na(these_ens))) {
bchars_modellags$bestest[i] = which.max(these_ens)
}
}


############################## for making densit plots later
model_lags_all$a_mppt_val = bchars_modellags$pos_val
model_lags_all$a_mppt_month = bchars_modellags$bestest



modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
crs = st_crs(4326))
#"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") 



ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^1)*15, color=factor(bestest))) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.5,1)^1)*15 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[2],dcwy[1]+170000,label="r-squared")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name="lag", values = c(plasma(14)[1:13]), labels=c(0,1,2,3,4,5,6,7,8,9,10,11,12)) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.95,.35),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=18),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("fitted_lagged_mppt_a_neg_new.png", width = 12, height = 12, dpi = 1200)


ggplot(modellags_sf, aes(x=1, y=pos_val)) +
ylim(0,1) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("r-squared") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("fitted_lagged_mppt_a_violin_neg_new.png", width = 5, height = 1.5, dpi = 1200)



##########################################
##########################################
## identifying the most explicative time lag
## (positive relationship)
## for b
## with mppt
model_rsqrs = which(names(basin_chars) == "mppt_rsqr_b")
model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "ppty_rsqr_b_30"), by=6, length=12))
model_slopes = which(names(basin_chars) == "mppt_slope_b")
model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "ppty_slope_b_30"), by=6, length=12))
model_slope_df = basin_chars[,model_slopes_cols]
model_rsqr_df = basin_chars[,model_rsqr_cols]
model_rsqr_df_pos = model_rsqr_df
for (i in 1:13) {
negs = which(model_slope_df[,i] < 0)
model_rsqr_df_pos[negs,i] = NA
}
max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
bchars_modellags = basin_chars
bchars_modellags$pos_val = max_value_lags
bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

bchars_modellags$bestest = NA
for(i in 1:nrow(bchars_modellags)) {
these_ens = as.vector(model_rsqr_df_pos[i,])
if(any(!is.na(these_ens))) {
bchars_modellags$bestest[i] = which.max(these_ens)
}
}

modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
crs = st_crs(4326))

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^1)*15, color=factor(bestest))) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.5,1)^1)*15 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[2],dcwy[1]+170000,label="r-squared")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name="lag", values = c(plasma(14)[1:13]), labels=c(0,1,2,3,4,5,6,7,8,9,10,11,12)) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.95,.35),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=18),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("fitted_lagged_mppt_b_new.png", width = 12, height = 12, dpi = 1200)


ggplot(modellags_sf, aes(x=1, y=pos_val)) +
ylim(0,1) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("r-squared") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("fitted_lagged_mppt_b_violin_new.png", width = 5, height = 1.5, dpi = 1200)



##########################################
## identifying the most explicative time lag
## (negative relationship)
## for b
## with mppt
#model_rsqrs = which(names(basin_chars) == "mppt_rsqr_b")
#model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "ppty_rsqr_b_30"), by=6, length=12))
#model_slopes = which(names(basin_chars) == "mppt_slope_b")
#model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "ppty_slope_b_30"), by=6, length=12))
#model_slope_df = basin_chars[,model_slopes_cols]
#model_rsqr_df = basin_chars[,model_rsqr_cols]
#model_rsqr_df_pos = model_rsqr_df
#for (i in 1:13) {
# negs = which(model_slope_df[,i] > 0)
# model_rsqr_df_pos[negs,i] = NA
#}
#max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
#bchars_modellags = basin_chars
#bchars_modellags$pos_val = max_value_lags
#bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

#bchars_modellags$bestest = NA
#for(i in 1:nrow(bchars_modellags)) {
# these_ens = as.vector(model_rsqr_df_pos[i,])
# if(any(!is.na(these_ens))) {
# bchars_modellags$bestest[i] = which.max(these_ens)
# }
#}


############################## for making densit plots later
#model_lags_all$b_mppt_val = bchars_modellags$pos_val
#model_lags_all$b_mppt_month = bchars_modellags$bestest


#modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
# crs = st_crs(4326))
#"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") 

#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^.75) *10, color=factor(bestest))) +
# scale_color_manual(values = c(plasma(14)[1:13])) +
# scale_color_viridis_c(option = "plasma", end=0.9, limits=c(1,13), na.value=plasma(10)[1]) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("fitted_lagged_mppt_b_neg.png", width = 12, height = 12, dpi = 1200)


#ggplot(modellags_sf, aes(x=1, y=pos_val)) +
#ylim(0,1) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#theme_classic()
#ggsave("fitted_lagged_mppt_b_violin_neg.png", width = 1.5, height = 5, dpi = 1200)


##########################################
##########################################
## identifying the most explicative time lag
## (positive relationship)
## for a
## with evap
model_rsqrs = which(names(basin_chars) == "mevap_rsqr_a")
model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "evapy_rsqr_a_30"), by=6, length=12))
model_slopes = which(names(basin_chars) == "mevap_slope_a")
model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "evapy_slope_a_30"), by=6, length=12))
model_slope_df = basin_chars[,model_slopes_cols]
model_rsqr_df = basin_chars[,model_rsqr_cols]
model_rsqr_df_pos = model_rsqr_df
for (i in 1:13) {
negs = which(model_slope_df[,i] < 0)
model_rsqr_df_pos[negs,i] = NA
}
max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
bchars_modellags = basin_chars
bchars_modellags$pos_val = max_value_lags
bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

bchars_modellags$bestest = NA
for(i in 1:nrow(bchars_modellags)) {
these_ens = as.vector(model_rsqr_df_pos[i,])
if(any(!is.na(these_ens))) {
bchars_modellags$bestest[i] = which.max(these_ens)
}
}


############################## for making densit plots later
model_lags_all$a_mevap_val = bchars_modellags$pos_val
model_lags_all$a_mevap_month = bchars_modellags$bestest



modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
crs = st_crs(4326))


ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^1)*15, color=factor(bestest))) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.5,1)^1)*15 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[2],dcwy[1]+170000,label="r-squared")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name="lag", values = c(plasma(14)[1:13]), labels=c(0,1,2,3,4,5,6,7,8,9,10,11,12)) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.95,.35),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=18),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("fitted_lagged_mevap_a_pos_new.png", width = 12, height = 12, dpi = 1200)


ggplot(modellags_sf, aes(x=1, y=pos_val)) +
ylim(0,1) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("r-squared") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("fitted_lagged_mevap_a_violin_pos_new.png", width = 5, height = 1.5, dpi = 1200)


##########################################
##########################################
## identifying the most explicative time lag
## (negative relationship)
## for a
## with mevap
#model_rsqrs = which(names(basin_chars) == "mevap_rsqr_a")
#model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "evapy_rsqr_a_30"), by=6, length=12))
#model_slopes = which(names(basin_chars) == "mevap_slope_a")
#model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "evapy_slope_a_30"), by=6, length=12))
#model_slope_df = basin_chars[,model_slopes_cols]
#model_rsqr_df = basin_chars[,model_rsqr_cols]
#model_rsqr_df_pos = model_rsqr_df
#for (i in 1:13) {
# negs = which(model_slope_df[,i] > 0)
# model_rsqr_df_pos[negs,i] = NA
#}
#max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
#bchars_modellags = basin_chars
#bchars_modellags$pos_val = max_value_lags
#bchars_modellags$pos_val[which(max_value_lags < 0)] = NA
#
#bchars_modellags$bestest = NA
#for(i in 1:nrow(bchars_modellags)) {
# these_ens = as.vector(model_rsqr_df_pos[i,])
# if(any(!is.na(these_ens))) {
# bchars_modellags$bestest[i] = which.max(these_ens)
# }
#}

#modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
# crs = st_crs(4326))
# #"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") 



#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^1)*15, color=factor(bestest))) +
# geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.5,1)^1)*15 )) +
## geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1))) +
# geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[2],dcwy[1]+170000,label="r-squared")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
# scale_color_manual(name="lag", values = c(plasma(14)[1:13]), labels=c(0,1,2,3,4,5,6,7,8,9,10,11,12)) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
## style = north_arrow_fancy_orienteering) +
# theme(legend.background=element_blank(), 
# legend.position=c(.95,.35),
# legend.title=element_text(face='bold', size=20),
# legend.text=element_text(size=18),
# panel.background=NULL ,
# panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
# panel.border=element_rect(fill=NA),
# axis.title=element_blank(),
# axis.text=element_text(size=20)) 
#ggsave("fitted_lagged_mevap_a_pos_new.png", width = 12, height = 12, dpi = 1200)


#ggplot(modellags_sf, aes(x=1, y=pos_val)) +
# ylim(0,1) +
# geom_violin(lwd=1.5, trim = FALSE) + 
# coord_flip() +
# ylab("r-squared") +
# theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
# panel.grid.minor=element_blank(),
# axis.text=element_text(size=15),
# axis.title.y=element_blank(),
# axis.title.x=element_text(size=18))
#ggsave("fitted_lagged_mevap_a_violin_pos_new.png", width = 5, height = 1.5, dpi = 1200)



##########################################
##########################################
## identifying the most explicative time lag
## (positive relationship)
## for b
## with mevap
model_rsqrs = which(names(basin_chars) == "mevap_rsqr_b")
model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "evapy_rsqr_b_30"), by=6, length=12))
model_slopes = which(names(basin_chars) == "mevap_slope_b")
model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "evapy_slope_b_30"), by=6, length=12))
model_slope_df = basin_chars[,model_slopes_cols]
model_rsqr_df = basin_chars[,model_rsqr_cols]
model_rsqr_df_pos = model_rsqr_df
for (i in 1:13) {
negs = which(model_slope_df[,i] < 0)
model_rsqr_df_pos[negs,i] = NA
}
max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
bchars_modellags = basin_chars
bchars_modellags$pos_val = max_value_lags
bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

bchars_modellags$bestest = NA
for(i in 1:nrow(bchars_modellags)) {
these_ens = as.vector(model_rsqr_df_pos[i,])
if(any(!is.na(these_ens))) {
bchars_modellags$bestest[i] = which.max(these_ens)
}
}


############################## for making densit plots later
model_lags_all$b_mevap_val = bchars_modellags$pos_val
model_lags_all$b_mevap_month = bchars_modellags$bestest


modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
crs = st_crs(4326))

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^1)*15, color=factor(bestest))) +
geom_point(data=legend_points, color='grey30', shape=16, aes(dcex, dcwy, stroke=(c(.1,.5,1)^1)*15 )) +
geom_text(data=legend_points, color='grey30', size=8, aes(dcex,dcwy-162000,label=c('.1','.5',1))) +
geom_text(data=legend_points, color='grey30', fontface='bold', size=8, aes(dcex[2],dcwy[1]+170000,label="r-squared")) +
# geom_rect(data=legend_points, fill=NA, color='grey20',
# aes(xmin=dcex[1]-180000, xmax=dcex[3]+119000, ymin=dcwy[1]-225000, ymax=dcwy[3]+118000)) +
scale_color_manual(name="lag", values = c(plasma(14)[1:13]), labels=c(0,1,2,3,4,5,6,7,8,9,10,11,12)) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme(legend.background=element_blank(), 
legend.position=c(.95,.35),
legend.title=element_text(face='bold', size=20),
legend.text=element_text(size=18),
panel.background=NULL ,
panel.grid=NULL , panel.grid.major=element_line(color="grey92"), panel.grid.minor=NULL,
panel.border=element_rect(fill=NA),
axis.title=element_blank(),
axis.text=element_text(size=20)) 
ggsave("fitted_lagged_mevap_b_new.png", width = 12, height = 12, dpi = 1200)


ggplot(modellags_sf, aes(x=1, y=pos_val)) +
ylim(0,1) +
geom_violin(lwd=1.5, trim = FALSE) + 
coord_flip() +
ylab("r-squared") +
theme(panel.background=element_blank(), panel.grid=NULL , panel.grid.major=element_line(color="grey92",size=1, linetype=3),
panel.grid.minor=element_blank(),
axis.text=element_text(size=15),
axis.title.y=element_blank(),
axis.title.x=element_text(size=18))
ggsave("fitted_lagged_mevap_b_violin_new.png", width = 5, height = 1.5, dpi = 1200)


##########################################
## identifying the most explicative time lag
## (negative relationship)
## for b
## with mevap
#model_rsqrs = which(names(basin_chars) == "mevap_rsqr_b")#
#model_rsqr_cols = c(model_rsqrs, seq(which(names(basin_chars) == "evapy_rsqr_b_30"), by=6, length=12))
#model_slopes = which(names(basin_chars) == "mevap_slope_b")
#model_slopes_cols = c(model_slopes, seq(which(names(basin_chars) == "evapy_slope_b_30"), by=6, length=12))
#model_slope_df = basin_chars[,model_slopes_cols]
#model_rsqr_df = basin_chars[,model_rsqr_cols]
#model_rsqr_df_pos = model_rsqr_df
#for (i in 1:13) {
# negs = which(model_slope_df[,i] > 0)
# model_rsqr_df_pos[negs,i] = NA
#}
#max_value_lags = apply(model_rsqr_df_pos, 1, max, na.rm=TRUE)
#bchars_modellags = basin_chars
#bchars_modellags$pos_val = max_value_lags
#bchars_modellags$pos_val[which(max_value_lags < 0)] = NA

#bchars_modellags$bestest = NA
#for(i in 1:nrow(bchars_modellags)) {
# these_ens = as.vector(model_rsqr_df_pos[i,])
# if(any(!is.na(these_ens))) {
# bchars_modellags$bestest[i] = which.max(these_ens)
# }
#}

#modellags_sf = st_as_sf(subset(bchars_modellags, !is.na(pos_val)), coords = c("LNG_GAGE", "LAT_GAGE"), # convert foreign object ot object class sf
# crs = st_crs(4326))
#"+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs") 

#ggplot(data = world) +
# geom_sf(fill='grey92', color="grey92") +
# geom_sf(data=rivers, color='white') +
# geom_sf(data=lakes, fill='white', color='grey92') +
# geom_sf(data = modellags_sf, shape=16, alpha=.7, aes(stroke=(pos_val^.75) *10, color=factor(bestest))) +
# scale_color_manual(values = c(plasma(14)[1:13])) +
## scale_color_viridis_c(option = "plasma", end=0.9, limits=c(1,13), na.value=plasma(10)[1]) +
# coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
# annotation_scale(location = "bl", width_hint = 0.25) +
# annotation_north_arrow(location = "bl", which_north = "true", 
# pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
# style = north_arrow_fancy_orienteering) +
# theme_bw()
#ggsave("fitted_lagged_mevap_b_neg.png", width = 12, height = 12, dpi = 1200)


#ggplot(modellags_sf, aes(x=1, y=pos_val)) +
#ylim(0,1) +
#geom_violin(lwd=1.5, trim = FALSE) + 
#theme_classic()
#ggsave("fitted_lagged_mevap_b_violin_neg.png", width = 1.5, height = 5, dpi = 1200)




#Density plot of month of each metric
############## first with a
month_labs = 0:12
#month_tick_locs = seq(-1,1,length.out=7)

ggplot(model_lags_all) +
stat_density(geom='line', lwd=2, lty=2, aes(x=a_gracie_month-1), color=plasma(10)[2], adjust=3) +#, kernal="triangular", from=-1, to=1, adjust=0.000001) +
stat_density(geom='line', lwd=2, lty=3, aes(x=a_mevap_month-1), color=plasma(10)[5], adjust=3) +
stat_density(geom='line', lwd=2, lty=1, aes(x=a_mppt_month-1), color=plasma(10)[8], adjust=3) +
annotate('text', label=paste0("      GRACE"), x=10, y=.5, fontface='bold', color=plasma(10)[2], size=10) +
annotate('text', label=paste0("ET"), x=10, y=.425, fontface='bold', color=plasma(10)[5], size=10) +
annotate('text', label=paste0("   PPT"), x=10, y=.35, fontface='bold', color=plasma(10)[8],size=10) +
annotate('segment', x=6,xend=9, y=.5, yend=.5, color=plasma(10)[2], lwd=2, lty=2) +
annotate('segment', x=6,xend=9, y=.425, yend=.425, color=plasma(10)[5], lwd=2, lty=3) +
annotate('segment', x=6,xend=9, y=.35, yend=.35, color=plasma(10)[8], lwd=2, lty=1) +
scale_x_continuous(breaks = month_labs, labels = month_labs, expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
expand_limits(y=c(0,0.6), x=c(0,12.5)) +
theme_classic() +
theme(axis.title.x=element_blank()) + 
theme(axis.title.y=element_blank()) + 
# theme(axis.ticks.x=element_blank()) + 
# theme(axis.ticks.y=element_blank()) + 
theme(axis.text.x = element_text(color = "grey5", size = 20, angle = 0, hjust = .20, vjust = .25, face = "bold")) +
theme(axis.text.y = element_text(color = "grey5", size = 20, angle = 0, hjust = .5, vjust = 0, face = "bold"))


ggsave("timelag_a.png", width = 6, height = 6, dpi = 1200)


#Density plot of month of each metric
############## now with b
month_labs = 0:12
#month_tick_locs = seq(-1,1,length.out=7)

ggplot(model_lags_all) +
stat_density(geom='line', lwd=2, lty=2, aes(x=b_gracie_month-1), color=plasma(10)[2], adjust=3) +#, kernal="triangular", from=-1, to=1, adjust=0.000001) +
stat_density(geom='line', lwd=2, lty=3, aes(x=b_mevap_month-1), color=plasma(10)[5], adjust=3) +
stat_density(geom='line', lwd=2, lty=1, aes(x=b_mppt_month-1), color=plasma(10)[8], adjust=3) +
annotate('text', label=paste0("      GRACE"), x=10, y=.5, fontface='bold', color=plasma(10)[2], size=10) +
annotate('text', label=paste0("ET"), x=10, y=.425, fontface='bold', color=plasma(10)[5], size=10) +
annotate('text', label=paste0("   PPT"), x=10, y=.35, fontface='bold', color=plasma(10)[8],size=10) +
annotate('segment', x=6,xend=9, y=.5, yend=.5, color=plasma(10)[2], lwd=2, lty=2) +
annotate('segment', x=6,xend=9, y=.425, yend=.425, color=plasma(10)[5], lwd=2, lty=3) +
annotate('segment', x=6,xend=9, y=.35, yend=.35, color=plasma(10)[8], lwd=2, lty=1) +
scale_x_continuous(breaks = month_labs, labels = month_labs, expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
expand_limits(y=c(0,0.6), x=c(0,12.5)) +
theme_classic() +
theme(axis.title.x=element_blank()) + 
theme(axis.title.y=element_blank()) + 
# theme(axis.ticks.x=element_blank()) + 
# theme(axis.ticks.y=element_blank()) + 
theme(axis.text.x = element_text(color = "grey5", size = 20, angle = 0, hjust = .20, vjust = .25, face = "bold")) +
theme(axis.text.y = element_text(color = "grey5", size = 20, angle = 0, hjust = .5, vjust = 0, face = "bold"))


ggsave("timelag_b.png", width = 6, height = 6, dpi = 1200)







#########################################################
#########################################################
#########################################################
#### Figure 8 regression of rsqrs
r2Col = "grey5"
slpCol = plasma(10)[8]
lmCol = "grey5"
oneCol = plasma(10)[6]
pcCol = plasma(10)[1]
pointPch = 16
pointCols = plasma(10)[1]


#png(paste0("a_rsqrs_preds.png"), width = 3840, height = 3840)
par(mfrow=c(4,4), mar=c(0,0,0,0), oma=c(1,1,1,1), cex=5)

##### row 1
#title sinusoidal regression
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
text(x=.1, y=.5, labels="Sine", col=pcCol, pos=4, cex=5)

# slope and r2 of sinrsqr to gracie 
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
sinGracie = lm(model_lags_all$a_gracie_val ~ model_lags_all$sinrsqr_a)
text(x=.5, y=.65, labels=paste(round(summary(SinGracie)$adj.r, 2)), cex=4, col=r2Col)
text(x=.5, y=.35, labels=paste(round(SinGracie$coef[2], 2)), cex=3.5, col=slpCol)

# slope and r2 of sinrsqr to mevap
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
sinMevap = lm(model_lags_all$a_mevap_val ~ model_lags_all$sinrsqr_a)
text(x=.5, y=.65, labels=paste(round(summary(sinMevap)$adj.r, 2)), cex=4, col=r2Col)
text(x=.5, y=.35, labels=paste(round(sinMevap$coef[2], 2)), cex=3.5, col=slpCol)

# slope and r2 of sinrsqr to mppt
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
sinMppt = lm(model_lags_all$a_mppt_val ~ model_lags_all$sinrsqr_a)
text(x=.5, y=.65, labels=paste(round(summary(sinMppt)$adj.r, 2)), cex=4, col=r2Col)
text(x=.5, y=.35, labels=paste(round(sinMppt$coef[2], 2)), cex=3.5, col=slpCol)


##### row 2
# recession plot for sinrsqr to gracie
plot(model_lags_all$sinrsqr_a, model_lags_all$a_gracie_val, col=alpha(pointCols, 0.6), pch=pointPch,  xaxt='n')#axes=FALSE)
abline(reg=sinGracie, col=slpCol, lwd=20)
abline(0,1, col=oneCol, lty=5, lwd=20)

#title of gracie
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
text(x=-.05, y=.5, labels="GRACE", col=pcCol, pos=4, cex=4.1)

# slope and r2 of gracie to mevap
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
gracieMevap = lm(model_lags_all$a_mevap_val ~ model_lags_all$a_gracie_val)
text(x=.5, y=.65, labels=paste(round(summary(gracieMevap)$adj.r, 2)), cex=4, col=r2Col)
text(x=.5, y=.35, labels=paste(round(gracieMevap$coef[2], 2)), cex=3.5, col=slpCol)

# slope and r2 of gracie to mppt
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
gracieMppt = lm(model_lags_all$a_mppt_val ~ model_lags_all$a_gracie_val)
text(x=.5, y=.65, labels=paste(round(summary(gracieMppt)$adj.r, 2)), cex=4, col=r2Col)
text(x=.5, y=.35, labels=paste(round(gracieMppt$coef[2], 2)), cex=3.5, col=slpCol)# 


##### row 3
# recession plot sinrsqr to mevap
plot(model_lags_all$sinrsqr_a, model_lags_all$a_mevap_val, col=alpha(pointCols, 0.6), pch=pointPch,  xaxt='n')#axes=FALSE)
abline(reg=sinMevap, col=slpCol, lwd=20)
abline(0,1, col=oneCol, lty=5, lwd=20)

# recession plot for Ru to Rk
plot(model_lags_all$a_gracie_val, model_lags_all$a_mevap_val, col=alpha(pointCols, 0.6), pch=pointPch,  xaxt='n', yaxt='n')#axes=FALSE)
abline(reg=gracieMevap, col=slpCol, lwd=20)
abline(0,1, col=oneCol, lty=5, lwd=20)

#title of mevap
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
text(x=.25, y=.5, labels="ET", col=pcCol, pos=4, cex=5)

# slope and r2 of mevap to mppt
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
mevapMppt = lm(model_lags_all$a_mppt_val ~ model_lags_all$a_mevap_val)
text(x=.5, y=.65, labels=paste(round(summary(mevapMppt)$adj.r, 2)), cex=4, col=r2Col)
text(x=.5, y=.35, labels=paste(round(mevapMppt$coef[2], 2)), cex=3.5, col=slpCol)# slope and r2 of Re-med to Rpc


##### row 4
# recession plot for sin to mppt
plot(model_lags_all$sinrsqr_a, model_lags_all$a_mppt_val, col=alpha(pointCols, 0.6), pch=pointPch,  xaxt='n')#axes=FALSE)
abline(reg=sinMppt, col=slpCol, lwd=20)
abline(0,1, col=oneCol, lty=5, lwd=20)

# recession plot for gracie to mppt
plot(model_lags_all$a_gracie_val, model_lags_all$a_mppt_val, col=alpha(pointCols, 0.6), pch=pointPch,  xaxt='n', yaxt='n')#axes=FALSE)
abline(reg=gracieMppt, col=slpCol, lwd=20)
abline(0,1, col=oneCol, lty=5, lwd=20)

# recession plot for mevap to mppt
plot(model_lags_all$a_mevap_val, model_lags_all$a_mppt_val, col=alpha(pointCols, 0.6), pch=pointPch,  xaxt='n', yaxt='n')#axes=FALSE)
abline(reg=mevapMppt, col=slpCol, lwd=20)
abline(0,1, col=oneCol, lty=5, lwd=20)

#title of mppt
plot(0:1,0:1, col=NULL,  ylab = "", xaxt='n', yaxt='n')#axes=FALSE)
text(x=.15, y=.5, labels="PPT", col=pcCol, pos=4, cex=5)














mppt_a_cols = which(names(bchars) == "mppt_rsqr_a")
mppt_a_cols = c(mppt_a_cols, seq(which(names(bchars) == "ppty_rsqr_a_30"), by=6, length=14))
mppt_a_dat = bchars[,mppt_a_cols]
mppt_a_dat_val = apply(mppt_a_dat, 1, max, na.rm=TRUE)
mppt_a_dat$bestest = apply(mppt_a_dat, 1, which.max)

mppt_b_cols = which(names(bchars) == "mppt_rsqr_b")
mppt_b_cols = c(mppt_b_cols, seq(which(names(bchars) == "ppty_rsqr_b_30"), by=6, length=14))
mppt_b_dat = bchars[,mppt_b_cols]
mppt_b_dat_val = apply(mppt_b_dat, 1, max, na.rm=TRUE)
mppt_b_dat$bestest = apply(mppt_b_dat, 1, which.max)

mevap_a_cols = which(names(bchars) == "mevap_rsqr_a")
mevap_a_cols = c(mevap_a_cols, seq(which(names(bchars) == "evapy_rsqr_a_30"), by=6, length=14))
mevap_a_dat = bchars[,mevap_a_cols]
mevap_a_dat_val = apply(mevap_a_dat, 1, max, na.rm=TRUE)
mevap_a_dat$bestest = apply(mevap_a_dat, 1, which.max)

mevap_b_cols = which(names(bchars) == "mevap_rsqr_b")
mevap_b_cols = c(mevap_b_cols, seq(which(names(bchars) == "evapy_rsqr_b_30"), by=6, length=14))
mevap_b_dat = bchars[,mevap_b_cols]
mevap_b_dat_val = apply(mevap_b_dat, 1, max, na.rm=TRUE)
mevap_b_dat$bestest = apply(mevap_b_dat, 1, which.max)

































#########################################################
#### Figure 5 


#########################################################
#### Figure 6 rsqrs of fitted data
min_pval = 0.003 # significance, how about at 3 sigma?

#fits to grace data
#### gracie to a
bchars_datafit = subset(bchars_sf, gracie_signif_a < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$gracie_slope_a > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$gracie_rsqr_a * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_gracie_a.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=gracie_rsqr_a)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_gracie_a_violin.png", width = 1.5, height = 5, dpi = 1200)

#### gracie to b
bchars_datafit = subset(bchars_sf, gracie_signif_b < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$gracie_slope_b > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$gracie_rsqr_b * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_gracie_b.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=gracie_rsqr_b)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_gracie_b_violin.png", width = 1.5, height = 5, dpi = 1200)


#fits to ppt data
#### ppt to a
bchars_datafit = subset(bchars_sf, mppt_signif_a < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$mppt_slope_a > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$mppt_rsqr_a * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_mppt_a.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=mppt_rsqr_a)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_mppt_a_violin.png", width = 1.5, height = 5, dpi = 1200)


#### mppt to b
bchars_datafit = subset(bchars_sf, mppt_signif_b < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$mppt_slope_b > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$mppt_rsqr_b * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_mppt_b.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=mppt_rsqr_b)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_mppt_b_violin.png", width = 1.5, height = 5, dpi = 1200)



#fits to evap data
#### mevap to a
bchars_datafit = subset(bchars_sf, mevap_signif_a < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$mevap_slope_a > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$mevap_rsqr_a * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_mevap_a.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=mevap_rsqr_a)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_mevap_a_violin.png", width = 1.5, height = 5, dpi = 1200)


#### mevap to b
bchars_datafit = subset(bchars_sf, mevap_signif_b < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$mevap_slope_b > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$mevap_rsqr_b * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_mevap_b.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=mevap_rsqr_b)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_mevap_b_violin.png", width = 1.5, height = 5, dpi = 1200)



#fits to msm10 data
#### msm10 to a
bchars_datafit = subset(bchars_sf, msm10_signif_a < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$msm10_slope_a > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$msm10_rsqr_a * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_msm10_a.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=msm10_rsqr_a)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_msm10_a_violin.png", width = 1.5, height = 5, dpi = 1200)


#### msm10 to b
bchars_datafit = subset(bchars_sf, msm10_signif_b < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$msm10_slope_b > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$msm10_rsqr_b * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_msm10_b.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=msm10_rsqr_b)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_msm10_b_violin.png", width = 1.5, height = 5, dpi = 1200)


#fits to msm40 data
#### msm40 to a
bchars_datafit = subset(bchars_sf, msm40_signif_a < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$msm40_slope_a > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$msm40_rsqr_a * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_msm40_a.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=msm40_rsqr_a)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_msm40_a_violin.png", width = 1.5, height = 5, dpi = 1200)


#### msm40 to b
bchars_datafit = subset(bchars_sf, msm40_signif_b < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$msm40_slope_b > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$msm40_rsqr_b * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_msm40_b.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=msm40_rsqr_b)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_msm40_b_violin.png", width = 1.5, height = 5, dpi = 1200)



#fits to msm100 data
#### msm100 to a
bchars_datafit = subset(bchars_sf, msm100_signif_a < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$msm100_slope_a > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$msm100_rsqr_a * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_msm100_a.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=msm100_rsqr_a)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_msm100_a_violin.png", width = 1.5, height = 5, dpi = 1200)


#### msm100 to b
bchars_datafit = subset(bchars_sf, msm100_signif_b < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$msm100_slope_b > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$msm100_rsqr_b * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_msm100_b.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=msm100_rsqr_b)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_msm100_b_violin.png", width = 1.5, height = 5, dpi = 1200)


#fits to msm200 data
#### msm200 to a
bchars_datafit = subset(bchars_sf, msm200_signif_a < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$msm200_slope_a > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$msm200_rsqr_a * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_msm200_a.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=msm200_rsqr_a)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_msm200_a_violin.png", width = 1.5, height = 5, dpi = 1200)


#### msm200 to b
bchars_datafit = subset(bchars_sf, msm200_signif_b < min_pval)
bchars_datafit$pos = 'negative'
bchars_datafit$pos[which(bchars_datafit$msm200_slope_b > 0)] = 'positive'
bchars_datafit$plotter = bchars_datafit$msm200_rsqr_b * 15

ggplot(data = world) +
geom_sf(fill='grey92', color="grey92") +
geom_sf(data=rivers, color='white') +
geom_sf(data=lakes, fill='white', color='grey92') +
geom_sf(data = bchars_datafit, shape=16, alpha=.7, aes(stroke=plotter, color=pos)) +
scale_color_manual(values = c(plasma(10)[2], plasma(10)[8])) +
coord_sf(crs = st_crs(2163), xlim = c(2600000, -2100000), ylim = c(-2200000, 950000),expand=FALSE) +
annotation_scale(location = "bl", width_hint = 0.25) +
annotation_north_arrow(location = "bl", which_north = "true", 
pad_x = unit(0.15, "in"), pad_y = unit(0.25, "in"),
style = north_arrow_fancy_orienteering) +
theme_bw()
ggsave("fitted_msm200_b.png", width = 12, height = 12, dpi = 1200)


ggplot(bchars_datafit, aes(x=1, y=msm200_rsqr_b)) +
expand_limits(y = c(0,1)) +
geom_violin(lwd=1.5, trim = FALSE) + 
#scale_y_log10() +
theme_classic()
ggsave("fitted_msm200_b_violin.png", width = 1.5, height = 5, dpi = 1200)
























##https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html

# loading the required packages
library(ggmap)
library(ggplot2)
library(knitr)
library(DT)
library(rgdal)
library(maptools)


# dsn is the folder the shape files are in. layer is the name of the file.
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2")#C:\\Users\\arikt\\OneDrive\\Documents\\PhD\\Research\\D2")
USA <- readOGR(dsn="shapefiles", layer="cb_2017_us_state_500k") #cb_2017_us_nation_20m")

bchars = basin_chars[!is.na(basin_chars$allmod_slope),]


# first, we have to isolate the coordinates of the police stations
# and let R know that these are spatial points

coords <- bchars[c("LNG_GAGE", "LAT_GAGE")]

# Making sure we are working with rows that don't have any blanks
coords <- coords[complete.cases(coords),]

# Letting R know that these are specifically spatial coordinates
sp <- SpatialPoints(coords, proj4string=CRS("+proj=longlat +ellps=WGS84"))


#hystcols = c('grey90', 'red', 'blue')
#plot(USA, ylim=c(32,48), xlim=c(-125,-100))
#plot(sp, col=hystcols[1+basin_chars$hysteresis], add=TRUE)



bchars$tot_wint_event = apply(bchars[,c("wint_tot_convex", "wint_tot_concav", "wint_tot_indetr")], 1, sum)
bchars$tot_spri_event = apply(bchars[,c("spri_tot_convex", "spri_tot_concav", "spri_tot_indetr")], 1, sum)
bchars$tot_summ_event = apply(bchars[,c("summ_tot_convex", "summ_tot_concav", "summ_tot_indetr")], 1, sum)
bchars$tot_fall_event = apply(bchars[,c("fall_tot_convex", "fall_tot_concav", "fall_tot_indetr")], 1, sum)

bchars$plotty = bchars$date_maxa #- bchars$spri_a_rmed
the_title = "event_med_slope"
#png(paste0(the_title, ".png"), width=960, height=480)

plot(USA, ylim=c(27,49), xlim=c(-125,-64))
pal = colorRampPalette(c("blue","green","red","blue"))
bchars$order = findInterval(bchars$plotty, sort(bchars$plotty))
col_pal = pal(nrow(bchars))

col_iters = seq(1,nrow(bchars), 200)

#plot(sp, col=col_pal[bchars$order], pch=8, add=TRUE)
plot(sp, col=col_pal[bchars$order], pch=1, cex=(bchars$maxa[bchars$order] - bchars$mina[bchars$order]),
lwd=(bchars$maxa[bchars$order] - bchars$mina[bchars$order])*4,add=TRUE)
#lgnd_txt = signif(range(bchars$plotty, na.rm=TRUE), 2)
lgnd_txt = ceiling(366*col_iters/nrow(bchars))
legend(x=-125, y=35, legend = lgnd_txt, col = col_pal[col_iters], pch = 8, lwd=2, border=NULL)
title(main=the_title)
#dev.off()


# for hysteresis 
bchars$plotty = bchars$hysteresis + 1
the_title = "hysteresis"
#png(paste0(the_title, ".png"), width=960, height=480)

plot(USA, ylim=c(27,49), xlim=c(-125,-64))
pal = c("grey80", "blue2", "red3")

plot(sp, col=pal[bchars$plotty], pch=c(".","o","x")[bchars$plotty], alpha=trans[bchars$plotty], add=TRUE)
lgnd_txt = c("none", "clockwise", "counterclock")
legend(x=-124, y=34, legend = lgnd_txt, col = pal, pch = 8, lwd=2, border=NULL)
title(main=the_title)
#dev.off()


# for existence
bchars = basin_chars
bchars$plotty = NULL
bchars$plotty[is.na(basin_chars$allmod_slope)] = 1
bchars$plotty[!is.na(basin_chars$allmod_slope)] = 2
bchars$plotty[concavruns] = 3

the_title = "existy"
#png(paste0(the_title, ".png"), width=1920, height=960)
par(cex=2)

plot(USA, ylim=c(26,49), xlim=c(-125,-64))
pal = c("grey80", "red3", 'blue2')
cymb = c('*', 'x', '+')

plot(sp, col=pal[bchars$plotty], pch=cymb[bchars$plotty], add=TRUE)

lgnd_txt = c("not captured", "convex", 'concave')
legend(x=-124, y=31, legend = lgnd_txt, col = pal, border=NULL)
title(main=the_title)
dev.off()














png(paste0("Example_recessions_hydrographs", ".png"), width=400, height=400)
the_chosen_strmfl = subset(strmflm, event %in% the_events)
plot(NULL, xlim=c(1,6), ylim=c(0,max(the_chosen_strmfl$Q)))
iter = 0
for(i in unique(the_chosen_strmfl$event)) {
iter=iter+1
lines(the_chosen_strmfl$Q[the_chosen_strmfl$event == i][1:6],
col=the_cols[iter], lwd=4, cex=3.5, lty=1, type='l', pch=the_symbs[iter])
# lines(1:6,cumsum(the_chosen_strmfl$Q[the_chosen_strmfl$event == i][1:6])/5,
# col=the_cols[iter], lwd=2, cex=1.8, lty=2)
}
dev.off()

#########################################################
#### Figure 2 average values of recession chars


plot(USA, ylim=c(26,49), xlim=c(-125,-64))

values = bchars$event_svntyfth_slope - bchars$event_twntyfth_slope
value_range = range(values)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(values, value_bins)

pal = colorRampPalette(c("red4","red3","red2","yellow3","blue2","blue3","blue4"), bias=3)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)











spdf <- SpatialPointsDataFrame(coords, bchars, proj4string=CRS("+proj=longlat +ellps=WGS84"))


#Point Cloud b values
the_title = "allmod_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$allmod_slope, bchars$event_med_slope)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$allmod_slope, value_bins)

pal = colorRampPalette(c("red4","red3","red2","yellow3","blue2","blue3","blue4"), bias=1.5)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Median Event b values
the_title = "event_med_slope_v"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

#value_range = range(bchars$allmod_slope, bchars$event_med_slope)
value_range=c(0,8)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","red2","yellow3","blue2","blue3","blue4"), bias=1.5)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Daily average b values
the_title = "julday_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$allmod_slope, bchars$event_med_slope)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$julday_slope, value_bins)

pal = colorRampPalette(c("red4","red3","red2","yellow3","blue2","blue3","blue4"), bias=2)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Difference in b values between event med and point cloud
the_title = "event_med_slope minus allmod_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$event_med_slope - bchars$allmod_slope)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$event_med_slope - bchars$allmod_slope, value_bins)

pal = colorRampPalette(c("green4","green3","green2","grey85","purple2","purple3","purple4"), bias=2)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Date of max b
the_title = "date_minb"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = 1:366
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=13)
spdf$plotty = findInterval(bchars$date_minb, value_bins)

pal = colorRampPalette(c("blue3","blue2","blue1","red1","red2","red3","red4","blue4"))
col_pal = pal(12)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,5,9,13)],0), col = col_pal[c(1,5,9,12)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average b values in winter
the_title = "wint_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_rmed, bchars$spri_rmed, bchars$summ_rmed, bchars$fall_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$wint_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","red2","yellow3","blue2","blue3","blue4"), bias=2)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=4, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average b values in spring
the_title = "spri_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_rmed, bchars$spri_rmed, bchars$summ_rmed, bchars$fall_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$spri_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","red2","yellow3","blue2","blue3","blue4"), bias=2)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average b values in summer
the_title = "summ_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_rmed, bchars$spri_rmed, bchars$summ_rmed, bchars$fall_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$summ_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","red2","yellow3","blue2","blue3","blue4"), bias=2)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average b values in summer
the_title = "fall_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_rmed, bchars$spri_rmed, bchars$summ_rmed, bchars$fall_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$fall_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","red2","yellow3","blue2","blue3","blue4"), bias=2)
col_pal = pal(19)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,7,10,14,19)],1), col = col_pal[c(1,2,3,4,5,7,10,14,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average deviation of b values in the winter
the_title = "wint_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$wint_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in the summer
the_title = "summ_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$summ_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average deviation of b values in the spring
the_title = "spri_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$spri_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()



#Average deviation of b values in the fall
the_title = "fall_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$fall_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()



pavelsky@email.unc.edu
lband@virginia.edu

#Average deviation of b values in january
the_title = "jan_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$jan_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=4, lwd=3, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in february
the_title = "feb_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$feb_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in march
the_title = "mar_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$mar_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in march
the_title = "apr_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$apr_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in march
the_title = "may_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$may_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in march
the_title = "jun_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$jun_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in march
the_title = "jul_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$jul_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in August
the_title = "aug_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$aug_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5.5, lwd=4, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in march
the_title = "sep_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$sep_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in march
the_title = "oct_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$oct_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in march
the_title = "nov_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$nov_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in December
the_title = "dec_rmed - event_med_slope"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,13)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$dec_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5.5, lwd=4, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Phase shift of b values
the_title = "phi_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$phi_b)
value_bins = seq(-pi, pi, length.out=21)
spdf$plotty = findInterval(bchars$phi_b, value_bins)

pal = colorRampPalette(c("red4","orange3","yellow3","green3","blue3","purple3","red4"), bias=1)
col_pal = pal(20)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Phase shift of a values
the_title = "phi_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$phi_a)
value_bins = seq(-pi, pi, length.out=21)
spdf$plotty = findInterval(bchars$phi_a, value_bins)

pal = colorRampPalette(c("red4","orange3","yellow3","green3","blue3","purple3","red4"), bias=1)
col_pal = pal(20)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Amplitude of b values
the_title = "amp_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$amp_b)
value_bins = seq(min(value_range), max(value_range), length.out=21)
spdf$plotty = findInterval(bchars$amp_b, value_bins)

pal = colorRampPalette(c("red4","orange3","yellow3","green3","blue3"), bias=3)
col_pal = pal(20)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Amplitude of a values
the_title = "amp_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$amp_a)
value_bins = seq(min(value_range), max(value_range), length.out=21)
spdf$plotty = findInterval(bchars$amp_a, value_bins)

pal = colorRampPalette(c("red4","orange3","yellow3","green3","blue3"), bias=1)
col_pal = pal(20)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,19)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()







#Phase shift of a values
the_title = "phi_a_arrows"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$modmean_a)
value_bins = seq(min(value_range), max(value_range), length.out=21)
spdf$plotty = findInterval(bchars$modmean_a, value_bins)

pal = colorRampPalette(c("blue2","grey30","red2"), bias=.5)
col_pal = pal(20)

length_ar = .1
arrows(coords[,1], coords[,2], x1=coords[,1]+length_ar*cos(spdf$phi_a), y1=coords[,2]+length_ar*sin(spdf$phi_a),
angle=20,  lwd=spdf$amp_a*5, col=col_pal[spdf$plotty])
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Phase shift of a values
the_title = "phi_a_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[,1], coords[,2], x1=coords[,1]+length_ar*cos(spdf$phi_a), y1=coords[,2]+length_ar*sin(spdf$phi_a),
angle=15,  lwd=2.2, cex=2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Phase shift of b values
the_title = "phi_b_arrows"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$modmean_b)
value_bins = seq(min(value_range), max(value_range), length.out=21)
spdf$plotty = findInterval(bchars$modmean_b, value_bins)

pal = colorRampPalette(c("red2","grey30","blue2"), bias=1)
col_pal = pal(20)

length_ar = .1
arrows(coords[,1], coords[,2], x1=coords[,1]+length_ar*cos(spdf$phi_b), y1=coords[,2]+length_ar*sin(spdf$phi_b),
angle=20,  lwd=(spdf$amp_b^.7)*2, col=col_pal[spdf$plotty])
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Phase shift of b values in bw
the_title = "phi_b_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[,1], coords[,2], x1=coords[,1]+length_ar*cos(spdf$phi_b), y1=coords[,2]+length_ar*sin(spdf$phi_b),
angle=15, lwd=2.2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()







####################################################################################################################

##########only including significant values
is_signif_b = which(bchars$sinsignif_b < 0.0027) # significant at 3 sigma
is_signif_a = which(bchars$sinsignif_a < 0.001) # significant at 4 sigma


#Phase shift of Q 
the_title = "phi_Q_arrows"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$modmean_Q)
value_bins = seq(min(value_range), max(value_range), length.out=21)
spdf$plotty = findInterval(bchars$modmean_Q, value_bins)

pal = colorRampPalette(c("blue2","grey30","red2"), bias=4)
col_pal = pal(20)

length_ar = .1
arrows(coords[is_signif_a,1], coords[is_signif_a,2],
x1=coords[is_signif_a,1]+length_ar*cos(spdf$phi_Q[is_signif_a] + pi),
y1=coords[is_signif_a,2]+length_ar*sin(spdf$phi_Q[is_signif_a] + pi),
angle=20,  lwd=(spdf$amp_Q[is_signif_a] / spdf$DRAIN_SQKM[is_signif_a])*2.5,
col=col_pal[spdf$plotty][is_signif_a])
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Phase shift of Q
the_title = "phi_Q_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[is_signif_a,1], coords[is_signif_a,2],
x1=coords[is_signif_a,1]+length_ar*cos(spdf$phi_Q[is_signif_a] + pi),
y1=coords[is_signif_a,2]+length_ar*sin(spdf$phi_Q[is_signif_a] + pi),
angle=15,  lwd=2.2, cex=2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Phase shift of a values
the_title = "phi_a_arrows"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$modmean_a)
value_bins = seq(min(value_range), max(value_range), length.out=21)
spdf$plotty = findInterval(bchars$modmean_a, value_bins)

pal = colorRampPalette(c("blue2","grey30","red2"), bias=.5)
col_pal = pal(20)

length_ar = .1
arrows(coords[is_signif_a,1], coords[is_signif_a,2],
x1=coords[is_signif_a,1]+length_ar*cos(spdf$phi_a[is_signif_a]),
y1=coords[is_signif_a,2]+length_ar*sin(spdf$phi_a[is_signif_a]),
angle=20,  lwd=(spdf$amp_a[is_signif_a]^.7)*4,
col=col_pal[spdf$plotty][is_signif_a])
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Phase shift of a values
the_title = "phi_a_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[is_signif_a,1], coords[is_signif_a,2],
x1=coords[is_signif_a,1]+length_ar*cos(spdf$phi_a[is_signif_a]),
y1=coords[is_signif_a,2]+length_ar*sin(spdf$phi_a[is_signif_a]),
angle=15,  lwd=2.2, cex=2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Phase shift of b values
the_title = "phi_b_arrows"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,10)#range(bchars$modmean_b)
value_bins = seq(min(value_range), max(value_range), length.out=21)
spdf$plotty = findInterval(bchars$modmean_b, value_bins)

pal = colorRampPalette(c("red4","red3","red2","grey40","blue2","blue3","blue4"), bias=1.5)
col_pal = pal(20)

length_ar = .1
arrows(coords[is_signif_b,1], coords[is_signif_b,2],
x1=coords[is_signif_b,1]+length_ar*cos(spdf$phi_b[is_signif_b]),
y1=coords[is_signif_b,2]+length_ar*sin(spdf$phi_b[is_signif_b]),
angle=20, lwd=2*(spdf$amp_b[is_signif_b]^.7),
col=col_pal[spdf$plotty][is_signif_b])
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Phase shift of b values in bw
the_title = "phi_b_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[is_signif_b,1], coords[is_signif_b,2],
x1=coords[is_signif_b,1]+length_ar*cos(spdf$phi_b[is_signif_b]),
y1=coords[is_signif_b,2]+length_ar*sin(spdf$phi_b[is_signif_b]),
angle=15, lwd=2.2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Relative phase shift of a values vs Q
the_title = "phi_Q_vs_a_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[is_signif_a,1], coords[is_signif_a,2],
x1=coords[is_signif_a,1]+length_ar*(cos(spdf$phi_Q[is_signif_a] + pi - spdf$phi_a[is_signif_a])),
y1=coords[is_signif_a,2]+length_ar*(sin(spdf$phi_Q[is_signif_a] + pi - spdf$phi_a[is_signif_a])),
angle=15,  lwd=2.2, cex=2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()




############# trends in the data (pre and post cutoff year)
pre_is_signif_b = which(bchars$pre_sinsignif_b < 0.0027) # significant at 3 sigma
post_is_signif_b = which(bchars$post_sinsignif_b < 0.0027) # significant at 3 sigma
inc_bs = pre_is_signif_b[pre_is_signif_b %in% post_is_signif_b]
pre_is_signif_a = which(bchars$pre_sinsignif_a < 0.0027) # significant at 3 sigma
post_is_signif_a = which(bchars$post_sinsignif_a < 0.0027) # significant at 3 sigma
inc_as = pre_is_signif_a[pre_is_signif_a %in% post_is_signif_a]

#Relative phase shift of a values with time
the_title = "preVpost_phi_a_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[inc_as,1], coords[inc_as,2],
x1=coords[inc_as,1]+length_ar*(cos(-spdf$pre_phi_a[inc_as] + spdf$post_phi_a[inc_as])),
y1=coords[inc_as,2]+length_ar*(sin(-spdf$pre_phi_a[inc_as] + spdf$post_phi_a[inc_as])),
angle=15,  lwd=2.2, cex=2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Relative phase shift of b values with time
the_title = "preVpost_phi_b_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[inc_bs,1], coords[inc_bs,2],
x1=coords[inc_bs,1]+length_ar*(cos(-spdf$pre_phi_b[inc_bs] + spdf$post_phi_b[inc_bs])),
y1=coords[inc_bs,2]+length_ar*(sin(-spdf$pre_phi_b[inc_bs] + spdf$post_phi_b[inc_bs])),
angle=15,  lwd=2.2, cex=2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#change in mean Q pre and post cutoff year
the_title = "pre_modmean_Q - post_modmean_Q"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

spdf$annualized_Q_mm = spdf$modmean_Q * 2446.58 * (1/(1000*1000)) * (1/spdf$DRAIN_SQKM) * 1000 * 365
spdf$pre_annualized_Q_mm = spdf$pre_modmean_Q * 2446.58 * (1/(1000*1000)) * (1/spdf$DRAIN_SQKM) * 1000 * 365
spdf$post_annualized_Q_mm = spdf$post_modmean_Q * 2446.58 * (1/(1000*1000)) * (1/spdf$DRAIN_SQKM) * 1000 * 365

value_range = c(-1000,1000)#range(bchars$pre_modmean_a[inc_as] - bchars$post_modmean_a[inc_as], na.rm=TRUE)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=101)
spdf$plotty = findInterval(spdf$pre_annualized_Q_mm - spdf$post_annualized_Q_mm, value_bins)

pal = colorRampPalette(c("red4","red4","red4","red4","red3","red3","red2","red2","red1","red1","grey90",
"royalblue1","royalblue1","royalblue2","royalblue2","royalblue3","royalblue3","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = rev(pal(101))

plot(spdf[inc_as,], breaks=value_bins, col=col_pal[spdf$plotty][inc_as], pch=8, cex=5.5, lwd=2, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,26,51,76,101)],1), col = col_pal[c(1,26,51,76,101)],
pch = 8, lwd=3, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#change in mean values of a pre and post cutoff year
the_title = "pre_modmean_a - post_modmean_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-12,12)#range(bchars$pre_modmean_a[inc_as] - bchars$post_modmean_a[inc_as], na.rm=TRUE)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=101)
spdf$plotty = findInterval(bchars$pre_modmean_a - bchars$post_modmean_a, value_bins)

pal = colorRampPalette(c("red4","red4","red4","red4","red3","red3","red2","red2","red1","red1","grey90",
"royalblue1","royalblue1","royalblue2","royalblue2","royalblue3","royalblue3","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(101)

plot(spdf[inc_as,], breaks=value_bins, col=col_pal[spdf$plotty][inc_as], pch=8, cex=5.5, lwd=2, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,26,51,76,101)],1), col = col_pal[c(1,26,51,76,101)],
pch = 8, lwd=3, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#change in mean values of b pre and post cutoff year
the_title = "pre_modmean_b - post_modmean_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,3)#range(bchars$pre_modmean_a[inc_as] - bchars$post_modmean_a[inc_as], na.rm=TRUE)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=101)
spdf$plotty = findInterval(bchars$pre_modmean_b - bchars$post_modmean_b, value_bins)

pal = colorRampPalette(c("red4","red4","red3","red3","red2","red2","red1","red1","grey90",
"royalblue1","royalblue1","royalblue2","royalblue2","royalblue3","royalblue3","royalblue4","royalblue4"),
bias=1)
col_pal = rev(pal(101))

plot(spdf[inc_bs,], breaks=value_bins, col=col_pal[spdf$plotty][inc_bs], pch=8, cex=5.5, lwd=2, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,26,51,76,101)],1), col = col_pal[c(1,26,51,76,101)],
pch = 8, lwd=3, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#change in timing of a pre and post cutoff year
he_title = "pre_phi_a_vs_post_phi_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[is_signif_a,1], coords[is_signif_a,2],
x1=coords[is_signif_a,1]+length_ar*(cos(spdf$pre_phi_a[is_signif_a] + pi - spdf$post_phi_a[is_signif_a])),
y1=coords[is_signif_a,2]+length_ar*(sin(spdf$pre_phi_a[is_signif_a] + pi - spdf$post_phi_a[is_signif_a])),
angle=15,  lwd=2.2, cex=2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#change in amplitude of b pre and post cutoff year
the_title = "pre_amp_b - post_amp_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,3)#range(bchars$pre_modmean_a[inc_as] - bchars$post_modmean_a[inc_as], na.rm=TRUE)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=101)
spdf$plotty = findInterval(bchars$pre_amp_b - bchars$post_amp_b, value_bins)

pal = colorRampPalette(c("red4","red4","red3","red3","red2","red2","red1","red1","grey90",
"royalblue1","royalblue1","royalblue2","royalblue2","royalblue3","royalblue3","royalblue4","royalblue4"),
bias=1)
col_pal = rev(pal(101))

plot(spdf[inc_bs,], breaks=value_bins, col=col_pal[spdf$plotty][inc_bs], pch=8, cex=5.5, lwd=2, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,26,51,76,101)],1), col = col_pal[c(1,26,51,76,101)],
pch = 8, lwd=3, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#change in amplitude of b pre and post cutoff year
the_title = "pre_amp_a - post_amp_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-3,3)#range(bchars$pre_modmean_a[inc_as] - bchars$post_modmean_a[inc_as], na.rm=TRUE)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=101)
spdf$plotty = findInterval(bchars$pre_amp_a - bchars$post_amp_a, value_bins)

pal = colorRampPalette(c("red4","red4","red3","red3","red2","red2","red1","red1","grey90",
"royalblue1","royalblue1","royalblue2","royalblue2","royalblue3","royalblue3","royalblue4","royalblue4"),
bias=1)
col_pal = rev(pal(101))

plot(spdf[inc_bs,], breaks=value_bins, col=col_pal[spdf$plotty][inc_bs], pch=8, cex=5.5, lwd=2, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,26,51,76,101)],1), col = col_pal[c(1,26,51,76,101)],
pch = 8, lwd=3, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#change in amplitude of b pre and post cutoff year
the_title = "pre_amp_Q - post_amp_Q"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(-150,150)#range(bchars$pre_modmean_a[inc_as] - bchars$post_modmean_a[inc_as], na.rm=TRUE)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=101)
spdf$plotty = findInterval(bchars$pre_amp_Q - bchars$post_amp_Q, value_bins)

pal = colorRampPalette(c("red4","red4","red3","red3","red2","red2","red1","red1","grey90",
"royalblue1","royalblue1","royalblue2","royalblue2","royalblue3","royalblue3","royalblue4","royalblue4"),
bias=1)
col_pal = rev(pal(101))

plot(spdf[inc_bs,], breaks=value_bins, col=col_pal[spdf$plotty][inc_bs], pch=8, cex=5.5, lwd=2, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,26,51,76,101)],1), col = col_pal[c(1,26,51,76,101)],
pch = 8, lwd=3, border=NULL, cex=2.7)
title(main=the_title)
dev.off()














#Phase shift of Q values
the_title = "pre_phi_Q_arrows"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$pre_modmean_Q)
value_bins = seq(min(value_range), max(value_range), length.out=21)
spdf$plotty = findInterval(bchars$pre_modmean_Q, value_bins)

pal = colorRampPalette(c("blue2","grey30","red2"), bias=4)
col_pal = pal(20)

length_ar = .1
arrows(coords[pre_is_signif_a,1], coords[pre_is_signif_a,2],
x1=coords[pre_is_signif_a,1]+length_ar*cos(spdf$pre_phi_Q[pre_is_signif_a] + pi),
y1=coords[pre_is_signif_a,2]+length_ar*sin(spdf$pre_phi_Q[pre_is_signif_a] + pi),
angle=20,  lwd=(spdf$amp_Q[pre_is_signif_a] / spdf$DRAIN_SQKM[pre_is_signif_a])*2,
col=col_pal[spdf$plotty][pre_is_signif_a])
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Phase shift of a values
the_title = "pre_phi_Q_arrows_bw"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

length_ar = .1
arrows(coords[pre_is_signif_a,1], coords[pre_is_signif_a,2],
x1=coords[pre_is_signif_a,1]+length_ar*cos(spdf$phi_Q[pre_is_signif_a] + pi),
y1=coords[pre_is_signif_a,2]+length_ar*sin(spdf$phi_Q[pre_is_signif_a] + pi),
angle=15,  lwd=2.2, cex=2)
#legend(x=-127, y=35, legend = round(value_bins[c(1,6,11,15,21)], 1), col = col_pal[c(1,6,11,15,20)],
# pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()





############# cluster analysis
bchars$phi_a_shift = bchars$phi_a
bchars$phi_a_shift[which(bchars$phi_a > 1)] = bchars$phi_a[which(bchars$phi_a > 1)] -2*pi


keep_rows = which(bchars$tot_events > 40)
bchars$pct_convex = bchars$tot_convex / bchars$tot_events
keep_cols = which(names(bchars) %in% c(
'event_med_slope',
'modmean_b',
#'allmod_slope',
#'modmean_a',
#'jul_day_slope',
'phi_a_shift',
'pct_convex',#, 
'amp_Q',
'amp_b',
'amp_a'
))#

rchars = bchars[keep_rows, keep_cols]
scale_rchars = scale(rchars)

# Determine number of clusters
wss = (nrow(scale_rchars) - 1) * sum(apply(scale_rchars, 2, var))
for (i in 2:15) wss[i] <- sum(kmeans(scale_rchars,
   centers=i)$withinss)
plot(1:15, wss, type="b", xlab="Number of Clusters",
  ylab="Within groups sum of squares")

# K-Means Cluster Analysis
num_clusters = 6
fit <- kmeans(scale_rchars, num_clusters) # 5 cluster solution
# get cluster means
aggregate(scale_rchars,by=list(fit$cluster),FUN=mean)
# append cluster assignment
scale_rchars <- data.frame(scale_rchars, fit$cluster)

bchars$cluster = NA
bchars$cluster[keep_rows] = fit$cluster
spdf$cluster = NA
spdf$cluster[keep_rows] = fit$cluster


#plotting clusters
the_title = paste(num_clusters, "clusters")
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = 1:num_clusters#range(bchars$pre_modmean_a[inc_as] - bchars$post_modmean_a[inc_as], na.rm=TRUE)
#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
#value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=101)
#spdf$plotty = findInterval(bchars$pre_amp_Q - bchars$post_amp_Q, value_bins)

pal = c("red4","blue4","green4","purple2","yellow4","grey20","orange2","skyblue2","grey70","royalblue1","brown2")
col_pal = pal[1:num_clusters]

plot(spdf, col=col_pal[spdf$cluster], pch=8, cex=3, lwd=2, add=TRUE)
legend(x=-127, y=35, legend = 1:num_clusters, col = col_pal[1:num_clusters],
pch = 8, lwd=3, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

###########################################################################################################
###### hotspot analysis
require(spdep)
getisord = spdf[,c(131,132,8]
SPDF = spdf$event_med_slope














###########################################################################################################
###### analyzing with grace data
good_rec = which(bchars$gracie_signif_a < 0.01)
the_title = "gracie_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b < 0.05)
the_title = "gracie_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_30 < 0.01)
the_title = "gracie_a_30"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_30 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_30 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_30[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_30 < 0.05)
the_title = "gracie_b_30"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_30 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_30 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_30[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_61 < 0.01)
the_title = "gracie_a_61"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_61 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_61 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_61[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_61 < 0.05)
the_title = "gracie_b_61"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_61 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_61 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_61[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_91 < 0.01)
the_title = "gracie_a_91"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_91 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_91 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_91[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_91 < 0.05)
the_title = "gracie_b_91"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_91 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_91 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_91[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_122 < 0.01)
the_title = "gracie_a_122"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_122 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_122 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_122[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_122 < 0.05)
the_title = "gracie_b_122"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_122 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_122 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_122[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_152 < 0.01)
the_title = "gracie_a_152"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_152 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_152 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_152[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_152 < 0.05)
the_title = "gracie_b_152"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_152 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_152 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_152[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_182 < 0.01)
the_title = "gracie_a_182"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_182 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_182 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_182[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_182 < 0.05)
the_title = "gracie_b_182"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_182 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_182 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_182[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_213 < 0.01)
the_title = "gracie_a_213"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_213 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_213 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_213[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_213 < 0.05)
the_title = "gracie_b_213"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_213 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_213 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_213[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_243 < 0.01)
the_title = "gracie_a_243"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_243 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_243 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_243[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_243 < 0.05)
the_title = "gracie_b_243"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_243 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_243 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_243[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_274 < 0.01)
the_title = "gracie_a_274"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_274 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_274 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_274[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_274 < 0.05)
the_title = "gracie_b_274"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_274 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_274 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_274[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_304 < 0.01)
the_title = "gracie_a_304"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_304 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_304 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_304[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_304 < 0.05)
the_title = "gracie_b_304"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_304 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_304 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_304[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_335 < 0.01)
the_title = "gracie_a_335"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_335 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_335 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_335[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_335 < 0.05)
the_title = "gracie_b_335"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_335 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_335 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_335[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_365 < 0.01)
the_title = "gracie_a_365"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_365 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_365 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_365[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_365 < 0.05)
the_title = "gracie_b_365"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_365 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_365 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_365[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$gracie_signif_a_396 < 0.01)
the_title = "gracie_a_396"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_a_396 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_a_396 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_a_396[good_rec], add=TRUE)

title(main=the_title)
dev.off()

good_rec = which(bchars$gracie_signif_b_396 < 0.05)
the_title = "gracie_b_396"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$gracie_slope_b_396 < 0)] = 1
spdf$posneg[which(spdf$gracie_slope_b_396 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$gracie_rsqr_b_396[good_rec], add=TRUE)
title(main=the_title)
dev.off()




###########################################################################################################
###### analyzing with merris data
######## evaps
good_rec = which(bchars$mevap_signif_a < 0.01)
the_title = "mevap_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$mevap_slope_a < 0)] = 1
spdf$posneg[which(spdf$mevap_slope_a > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$mevap_rsqr_a[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$mevap_signif_b < 0.01)
the_title = "mevap_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$mevap_slope_b < 0)] = 1
spdf$posneg[which(spdf$mevap_slope_b > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$mevap_rsqr_b[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_30 < 0.01)
the_title = "mevap_a_30"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_30 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_30 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_30[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_30 < 0.01)
the_title = "mevap_b_30"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_30 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_30 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_30[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_61 < 0.01)
the_title = "mevap_a_61"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_61 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_61 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_61[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_61 < 0.01)
the_title = "mevap_b_61"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_61 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_61 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_61[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_91 < 0.01)
the_title = "mevap_a_91"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_91 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_91 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_91[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_91 < 0.01)
the_title = "mevap_b_91"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_91 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_91 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_91[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_122 < 0.01)
the_title = "mevap_a_122"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_122 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_122 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_122[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_122 < 0.01)
the_title = "mevap_b_122"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_122 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_122 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_122[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_152 < 0.01)
the_title = "mevap_a_152"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_152 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_152 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_152[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_152 < 0.01)
the_title = "mevap_b_152"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_152 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_152 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_152[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_182 < 0.01)
the_title = "mevap_a_182"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_182 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_182 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_182[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_182 < 0.01)
the_title = "mevap_b_182"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_182 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_182 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_182[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_213 < 0.01)
the_title = "mevap_a_213"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_213 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_213 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_213[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_213 < 0.01)
the_title = "mevap_b_213"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_213 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_213 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_213[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_243 < 0.01)
the_title = "mevap_a_243"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_243 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_243 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_243[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_243 < 0.01)
the_title = "mevap_b_243"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_243 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_243 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_243[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_274 < 0.01)
the_title = "mevap_a_274"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_274 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_274 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_274[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_274 < 0.01)
the_title = "mevap_b_274"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_274 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_274 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_274[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_304 < 0.01)
the_title = "mevap_a_304"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_304 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_304 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_304[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_304 < 0.01)
the_title = "mevap_b_304"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_304 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_304 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_304[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_335 < 0.01)
the_title = "mevap_a_335"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_335 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_335 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_335[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_335 < 0.01)
the_title = "mevap_b_335"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_335 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_335 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_335[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_365 < 0.01)
the_title = "mevap_a_365"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_365 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_365 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_365[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_365 < 0.01)
the_title = "mevap_b_365"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_365 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_365 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_365[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$evapy_signif_a_396 < 0.01)
the_title = "mevap_a_396"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_a_396 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_a_396 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_a_396[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$evapy_signif_b_396 < 0.01)
the_title = "mevap_b_396"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$evapy_slope_b_396 < 0)] = 1
spdf$posneg[which(spdf$evapy_slope_b_396 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$evapy_rsqr_b_396[good_rec], add=TRUE)
title(main=the_title)
dev.off()



######## ppts
good_rec = which(bchars$mppt_signif_a < 0.01)
the_title = "mppt_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$mppt_slope_a < 0)] = 1
spdf$posneg[which(spdf$mppt_slope_a > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$mppt_rsqr_a[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$mppt_signif_b < 0.01)
the_title = "mppt_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$mppt_slope_b < 0)] = 1
spdf$posneg[which(spdf$mppt_slope_b > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$mppt_rsqr_b[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_30 < 0.01)
the_title = "mppt_a_30"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_30 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_30 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_30[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_30 < 0.01)
the_title = "mppt_b_30"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_30 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_30 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_30[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_61 < 0.01)
the_title = "mppt_a_61"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_61 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_61 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_61[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_61 < 0.01)
the_title = "mppt_b_61"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_61 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_61 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_61[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_91 < 0.01)
the_title = "mppt_a_91"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_91 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_91 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_91[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_91 < 0.01)
the_title = "mppt_b_91"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_91 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_91 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_91[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_122 < 0.01)
the_title = "mppt_a_122"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_122 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_122 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_122[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_122 < 0.01)
the_title = "mppt_b_122"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_122 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_122 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_122[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_152 < 0.01)
the_title = "mppt_a_152"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_152 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_152 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_152[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_152 < 0.01)
the_title = "mppt_b_152"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_152 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_152 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_152[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_182 < 0.01)
the_title = "mppt_a_182"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_182 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_182 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_182[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_182 < 0.01)
the_title = "mppt_b_182"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_182 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_182 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_182[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_213 < 0.01)
the_title = "mppt_a_213"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_213 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_213 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_213[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_213 < 0.01)
the_title = "mppt_b_213"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_213 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_213 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_213[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_243 < 0.01)
the_title = "mppt_a_243"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_243 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_243 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_243[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_243 < 0.01)
the_title = "mppt_b_243"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_243 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_243 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_243[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_274 < 0.01)
the_title = "mppt_a_274"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_274 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_274 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_274[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_274 < 0.01)
the_title = "mppt_b_274"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_274 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_274 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_274[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_304 < 0.01)
the_title = "mppt_a_304"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_304 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_304 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_304[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_304 < 0.01)
the_title = "mppt_b_304"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_304 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_304 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_304[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_335 < 0.01)
the_title = "mppt_a_335"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_335 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_335 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_335[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_335 < 0.01)
the_title = "mppt_b_335"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_335 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_335 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_335[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_365 < 0.01)
the_title = "mppt_a_365"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_365 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_365 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_365[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_365 < 0.01)
the_title = "mppt_b_365"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_365 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_365 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_365[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$ppty_signif_a_396 < 0.01)
the_title = "mppt_a_396"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_a_396 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_a_396 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_a_396[good_rec], add=TRUE)
title(main=the_title)
dev.off()

good_rec = which(bchars$ppty_signif_b_396 < 0.01)
the_title = "mppt_b_396"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$ppty_slope_b_396 < 0)] = 1
spdf$posneg[which(spdf$ppty_slope_b_396 > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$ppty_rsqr_b_396[good_rec], add=TRUE)
title(main=the_title)
dev.off()



######## msm10s
good_rec = which(bchars$msm10_signif_a < 0.01)
the_title = "msm10_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$msm10_slope_a < 0)] = 1
spdf$posneg[which(spdf$msm10_slope_a > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$msm10_rsqr_a[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$msm10_signif_b < 0.01)
the_title = "msm10_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$msm10_slope_b < 0)] = 1
spdf$posneg[which(spdf$msm10_slope_b > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$msm10_rsqr_b[good_rec], add=TRUE)
title(main=the_title)
dev.off()

######## msm40s
good_rec = which(bchars$msm40_signif_a < 0.01)
the_title = "msm40_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$msm40_slope_a < 0)] = 1
spdf$posneg[which(spdf$msm40_slope_a > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$msm40_rsqr_a[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$msm40_signif_b < 0.01)
the_title = "msm40_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$msm40_slope_b < 0)] = 1
spdf$posneg[which(spdf$msm40_slope_b > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$msm40_rsqr_b[good_rec], add=TRUE)
title(main=the_title)
dev.off()

######## msm100s
good_rec = which(bchars$msm100_signif_a < 0.01)
the_title = "msm100_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$msm100_slope_a < 0)] = 1
spdf$posneg[which(spdf$msm100_slope_a > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$msm100_rsqr_a[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$msm100_signif_b < 0.01)
the_title = "msm100_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$msm100_slope_b < 0)] = 1
spdf$posneg[which(spdf$msm100_slope_b > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$msm100_rsqr_b[good_rec], add=TRUE)
title(main=the_title)
dev.off()

######## msm200s
good_rec = which(bchars$msm200_signif_a < 0.01)
the_title = "msm200_a"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = rev(c("red3", "blue3"))
spdf$posneg = NA
spdf$posneg[which(spdf$msm200_slope_a < 0)] = 1
spdf$posneg[which(spdf$msm200_slope_a > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$msm200_rsqr_a[good_rec], add=TRUE)
title(main=the_title)
dev.off()


good_rec = which(bchars$msm200_signif_b < 0.01)
the_title = "msm200_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = c(0,1)

pal = c("red3", "blue3")
spdf$posneg = NA
spdf$posneg[which(spdf$msm200_slope_b < 0)] = 1
spdf$posneg[which(spdf$msm200_slope_b > 0)] = 2

plot(spdf[-good_rec,], col="grey80", pch=20, cex=1.5, add=TRUE)
plot(spdf[good_rec,], col=pal[spdf$posneg][good_rec], pch=4, cex=2.2, lwd=.5+15*spdf$msm200_rsqr_b[good_rec], add=TRUE)
title(main=the_title)
dev.off()












#############################################
## identifying the most explicative time lag
gracie_a_cols = which(names(bchars) == "gracie_rsqr_a")
gracie_a_cols = c(gracie_a_cols, seq(which(names(bchars) == "gracie_rsqr_a_30"), by=6, length=14))
gracie_a_dat = bchars[,gracie_a_cols]
gracie_a_dat_val = apply(gracie_a_dat, 1, max, na.rm=TRUE)
gracie_a_dat$bestest = apply(gracie_a_dat, 1, which.max)

gracie_b_cols = which(names(bchars) == "gracie_rsqr_b")
gracie_b_cols = c(gracie_b_cols, seq(which(names(bchars) == "gracie_rsqr_b_30"), by=6, length=14))
gracie_b_dat = bchars[,gracie_b_cols]
gracie_b_dat_val = apply(gracie_b_dat, 1, max, na.rm=TRUE)
gracie_b_dat$bestest = apply(gracie_b_dat, 1, which.max)

mppt_a_cols = which(names(bchars) == "mppt_rsqr_a")
mppt_a_cols = c(mppt_a_cols, seq(which(names(bchars) == "ppty_rsqr_a_30"), by=6, length=14))
mppt_a_dat = bchars[,mppt_a_cols]
mppt_a_dat_val = apply(mppt_a_dat, 1, max, na.rm=TRUE)
mppt_a_dat$bestest = apply(mppt_a_dat, 1, which.max)

mppt_b_cols = which(names(bchars) == "mppt_rsqr_b")
mppt_b_cols = c(mppt_b_cols, seq(which(names(bchars) == "ppty_rsqr_b_30"), by=6, length=14))
mppt_b_dat = bchars[,mppt_b_cols]
mppt_b_dat_val = apply(mppt_b_dat, 1, max, na.rm=TRUE)
mppt_b_dat$bestest = apply(mppt_b_dat, 1, which.max)

mevap_a_cols = which(names(bchars) == "mevap_rsqr_a")
mevap_a_cols = c(mevap_a_cols, seq(which(names(bchars) == "evapy_rsqr_a_30"), by=6, length=14))
mevap_a_dat = bchars[,mevap_a_cols]
mevap_a_dat_val = apply(mevap_a_dat, 1, max, na.rm=TRUE)
mevap_a_dat$bestest = apply(mevap_a_dat, 1, which.max)

mevap_b_cols = which(names(bchars) == "mevap_rsqr_b")
mevap_b_cols = c(mevap_b_cols, seq(which(names(bchars) == "evapy_rsqr_b_30"), by=6, length=14))
mevap_b_dat = bchars[,mevap_b_cols]
mevap_b_dat_val = apply(mevap_b_dat, 1, max, na.rm=TRUE)
mevap_b_dat$bestest = apply(mevap_b_dat, 1, which.max)


######## evaps
the_title = "mevap_b_peak_lag"
signif_cols = as.integer(mevap_b_cols[mevap_b_dat$bestest]-4)
signif_val = NULL
for(i in 1:nrow(bchars)) { signif_val = c(signif_val, bchars[i,signif_cols[i]])}
good_rec = which(signif_val < 0.001)

png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

pal = colorRampPalette(c("red4","orange2","yellow2","green1"), bias=1)
col_pal = pal(15)

plot(spdf[good_rec,], col=col_pal[mevap_b_dat$bestest][good_rec], pch=8, cex=2, lwd=10 * (mevap_b_dat_val[good_rec]^2), add=TRUE)
legend(x=-127, y=35, legend = c(0,4,8,13), col = col_pal[c(1,5,10,15)],
pch = 8, lwd=2, border=NULL, cex=2.7)
dev.off()

######## evaps
the_title = "mevap_a_peak_lag"
signif_cols = as.integer(mevap_a_cols[mevap_a_dat$bestest]-4)
signif_val = NULL
for(i in 1:nrow(bchars)) {signif_val = c(signif_val, bchars[i,signif_cols[i]])}
good_rec = which(signif_val < 0.001)

png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

pal = colorRampPalette(c("red4","orange2","yellow2","green1"), bias=1)
col_pal = pal(15)

plot(spdf[good_rec,], col=col_pal[mevap_a_dat$bestest][good_rec], pch=8, cex=2.2, lwd=10 * (mevap_a_dat_val[good_rec]^2), add=TRUE)
legend(x=-127, y=35, legend = c(0,4,8,13), col = col_pal[c(1,5,10,15)],
pch = 8, lwd=2, border=NULL, cex=2.7)
dev.off()

######## ppts
the_title = "mppt_b_peak_lag"
signif_cols = as.integer(mppt_b_cols[mppt_b_dat$bestest]-4)
signif_val = NULL
for(i in 1:nrow(bchars)) {signif_val = c(signif_val, bchars[i,signif_cols[i]])}
good_rec = which(signif_val < 0.001)

png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

pal = colorRampPalette(c("red4","orange2","yellow2","green1"), bias=1)
col_pal = pal(15)

plot(spdf[good_rec,], col=col_pal[mppt_b_dat$bestest][good_rec], pch=8, cex=2.2, lwd=10 * (mppt_b_dat_val[good_rec]^2), add=TRUE)
legend(x=-127, y=35, legend = c(0,4,8,13), col = col_pal[c(1,5,10,15)],
pch = 8, lwd=2, border=NULL, cex=2.7)
dev.off()

the_title = "mppt_a_peak_lag"
signif_cols = as.integer(mppt_a_cols[mppt_a_dat$bestest]-4)
signif_val = NULL
for(i in 1:nrow(bchars)) {signif_val = c(signif_val, bchars[i,signif_cols[i]])}
good_rec = which(signif_val < 0.001)

png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

pal = colorRampPalette(c("red4","orange2","yellow2","green1"), bias=1)
col_pal = pal(15)

plot(spdf[good_rec,], col=col_pal[mppt_a_dat$bestest][good_rec], pch=8, cex=2.2, lwd=10 * (mppt_a_dat_val[good_rec]^2), add=TRUE)
legend(x=-127, y=35, legend = c(0,4,8,13), col = col_pal[c(1,5,10,15)],
pch = 8, lwd=2, border=NULL, cex=2.7)
dev.off()


######## gracies
the_title = "gracie_b_peak_lag"
signif_cols = as.integer(gracie_b_cols[gracie_b_dat$bestest]-4)
signif_val = NULL
for(i in 1:nrow(bchars)) {signif_val = c(signif_val, bchars[i,signif_cols[i]])}
good_rec = which(signif_val < 0.001)

png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

pal = colorRampPalette(c("red4","orange2","yellow2","green1"), bias=1)
col_pal = pal(15)

plot(spdf[good_rec,], col=col_pal[gracie_b_dat$bestest][good_rec], pch=8, cex=2.2, lwd=10 * (gracie_b_dat_val[good_rec]^2), add=TRUE)
legend(x=-127, y=35, legend = c(0,4,8,13), col = col_pal[c(1,5,10,15)],
pch = 8, lwd=2, border=NULL, cex=2.7)
dev.off()

the_title = "gracie_a_peak_lag"
signif_cols = as.integer(gracie_a_cols[gracie_a_dat$bestest]-4)
signif_val = NULL
for(i in 1:nrow(bchars)) {signif_val = c(signif_val, bchars[i,signif_cols[i]])}
good_rec = which(signif_val < 0.001)

png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

pal = colorRampPalette(c("red4","orange2","yellow2","green1"), bias=1)
col_pal = pal(15)

plot(spdf[good_rec,], col=col_pal[gracie_a_dat$bestest][good_rec], pch=8, cex=2.2, lwd=10 * (gracie_a_dat_val[good_rec]^2), add=TRUE)
legend(x=-127, y=35, legend = c(0,4,8,13), col = col_pal[c(1,5,10,15)],
pch = 8, lwd=2, border=NULL, cex=2.7)
dev.off()























############################
### using coweeta data to look at inter-decadal signals
the_wd = getwd()
setwd("C:/Users/arik/Documents/PhD Research/D2")
coweeta = read.csv("Coweeta_observed_recession.csv")
coweeta = coweeta[which(!is.na(coweeta[,1])),]
coweeta$Date = ymd(paste0(coweeta$year,"-",coweeta$month,"-",coweeta$day))
plot(coweeta$Date, coweeta$alpha, ylim=c(-50,20))
lm_a = lm(coweeta$alpha ~ coweeta$Date)
abline(h=mean(coweeta$alpha), lty=5)
if(coef(summary(lm_a))[2,4] < .05) {
abline(coef(lm_a)[1], coef(lm_a)[2])
}
coweeta$days_since = as.numeric(difftime(coweeta$Date, coweeta$Date[1], units='days') + 1) 
fit_lm_a = lm(coweeta$alpha ~ sin(2*pi*coweeta$days_since/365.25) + cos(2*pi*coweeta$days_since/365.25))
b0_a <- coef(fit_lm_a)[1]
alpha_a <- coef(fit_lm_a)[2]
beta_a <- coef(fit_lm_a)[3]
amplitude_a <- sqrt(alpha_a^2 + beta_a^2)
phi_a <- atan2(beta_a, alpha_a)
signif_a = lmpvalue(fit_lm_a)
adjrsqr_a = summary(fit_lm_a)$adj.r.squared

lines(coweeta$Date, fitted(fit_lm_a), pch='.', cex=3, col='blue3')

plot(coweeta$Date, coweeta$alpha - fitted(fit_lm_a), ylim=c(-20,20)) 
abline(h=0,type=5)


plot(coweeta$Date, coweeta$beta, ylim=c(0,50))
lm_b = lm(coweeta$beta ~ coweeta$Date)
abline(h=mean(coweeta$beta), lty=5)
if(coef(summary(lm_b))[2,4] < .05) {
abline(coef(lm_b)[1], coef(lm_b)[2])
}
coweeta$days_since = as.numeric(difftime(coweeta$Date, coweeta$Date[1], units='days') + 1) 
fit_lm_b = lm(coweeta$beta ~ sin(2*pi*coweeta$days_since/365.25) + cos(2*pi*coweeta$days_since/365.25))
b0_b <- coef(fit_lm_b)[1]
alpha_b <- coef(fit_lm_b)[2]
beta_b <- coef(fit_lm_b)[3]
amplitude_b <- sqrt(alpha_b^2 + beta_b^2)
phi_b <- atan2(beta_b, alpha_b)
signif_b = lmpvalue(fit_lm_b)
adjrsqr_b = summary(fit_lm_b)$adj.r.squared

lines(coweeta$Date, fitted(fit_lm_b), pch='.', cex=3, col='blue3')

plot(coweeta$Date, coweeta$beta - fitted(fit_lm_b), ylim=c(-20,20)) 
abline(h=0,lty=5)

setwd(paste(the_wd))

































#models of b vs avg monthly climate variables
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2\\spreadsheets-in-csv-format")#C:\\Users\\arikt\\OneDrive\\Documents\\PhD\\Research\\D2\\spreadsheets-in-csv-format")
climate = read.csv("conterm_climate.txt", colClasses = c("STAID" = "character"))
bchars = merge(bchars, climate, by.x='gage', by.y='STAID')
setwd("C:\\Users\\arik\\Documents\\PhD Research\\D2\\images")#C:\\Users\\arikt\\OneDrive\\Documents\\PhD\\Research\\D2\\spreadsheets-in-csv-format")
tt = 0:12

# for ppt
par(mfrow=c(3,3))#, oma = c(3,3,0,0) + 0.1, mar = c(0,0,6,6) + 0.1)

for(i in 431:439) {
run = i
ppt_summ = summary(as.numeric((bchars[run,196:207])))
plot(tt, c(bchars[run,c(207, 196:207)]), type='b', lwd=2) # numbers are columns of jan-dec ppt
lines(x=tt,
y = ppt_summ[3] + diff(ppt_summ[c(2,5)])/2 * sin((2*pi*tt/12) + bchars$phi_b[run]),
col='blue3', lwd=3)  
title(main=paste(bchars[run,"region"], "@ amp", round(bchars$amp_b[run], 1)))
}

# for temp
par(mfrow=c(3,3))
for(i in 431:439) {
run = i
temp_summ = summary(as.numeric((bchars[run,208:219])))
plot(tt, c(bchars[run,c(219, 208:219)]), type='b', lwd=2) # numbers are columns of jan-dec ppt
lines(x=tt,
y = temp_summ[3] + diff(temp_summ[c(2,5)])/2 * sin((2*pi*tt/12) + bchars$phi_b[run]),
col='blue3', lwd=3)  
title(main=paste(bchars[run,"region"], "@ amp", round(bchars$amp_b[run], 1)))
}

# for est runoff
par(mfrow=c(3,3))
for(i in 431:439) {
run = i
runoff_summ = summary(as.numeric((bchars[run,139:150])))
plot(tt, c(bchars[run,c(150, 139:150)]), type='b', lwd=2) # numbers are columns of jan-dec ppt
lines(x=tt,
y = runoff_summ[3] + diff(runoff_summ[c(2,5)])/2 * sin((2*pi*tt/12) + bchars$phi_b[run]),
col='blue3', lwd=3)  
title(main=paste(bchars[run,"region"], "@ amp", round(bchars$amp_b[run], 1)))
}


#models of a vs avg monthly climate variables
# for ppt
par(mfrow=c(3,3))#, oma = c(3,3,0,0) + 0.1, mar = c(0,0,6,6) + 0.1)

for(i in 431:439) {
run = i
ppt_summ = summary(as.numeric((bchars[run,196:207])))
plot(tt, c(bchars[run,c(207, 196:207)]), type='b', lwd=2) # numbers are columns of jan-dec ppt
lines(x=tt,
y = ppt_summ[3] + diff(ppt_summ[c(2,5)])/2 * sin((2*pi*tt/12) + bchars$phi_a[run]),
col='red3', lwd=3)  
title(main=paste(bchars[run,"region"], "@ amp", round(bchars$amp_a[run], 1)))
}

# for temp
par(mfrow=c(3,3))
for(i in 431:439) {
run = i
temp_summ = summary(as.numeric((bchars[run,208:219])))
plot(tt, c(bchars[run,c(219, 208:219)]), type='b', lwd=2) # numbers are columns of jan-dec ppt
lines(x=tt,
y = temp_summ[3] + diff(temp_summ[c(2,5)])/2 * sin((2*pi*tt/12) + bchars$phi_a[run]),
col='red3', lwd=3)  
title(main=paste(bchars[run,"region"], "@ amp", round(bchars$amp_a[run], 1)))
}

# for est runoff
par(mfrow=c(3,3))
for(i in 431:439) {
run = i
runoff_summ = summary(as.numeric((bchars[run,139:150])))
plot(tt, c(bchars[run,c(150, 139:150)]), type='b', lwd=2) # numbers are columns of jan-dec ppt
lines(x=tt,
y = runoff_summ[3] + diff(runoff_summ[c(2,5)])/2 * sin((2*pi*tt/12) + bchars$phi_a[run]),
col='red3', lwd=3)  
title(main=paste(bchars[run,"region"], "@ amp", round(bchars$amp_a[run], 1)))
}

# nonlinearity vs stability
par(mfrow=c(3,3))
for(i in 431:439) {
run = i
a_summ = summary(as.numeric((bchars[run,139:150])))
plot(tt, 
y = bchars$modmean_b[run] + bchars$amp_b[run] * sin((2*pi*tt/12) + bchars$phi_b[run]),
col='blue3', lwd=3, type = 'l',
ylim=c(0,9))
lines(x=tt,
y = 10+bchars$modmean_a[run] + bchars$amp_a[run] * sin((2*pi*tt/12) + bchars$phi_a[run]),
col='red3', lwd=3)  
}

















#Average deviation of b values in winter
the_title = "wint_rmed - event_med_slope_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$wint_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of b values in spring
the_title = "spri_rmed - event_med_slope_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$spri_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average deviation of b values in summer
the_title = "summ_rmed - event_med_slope_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$summ_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average deviation of b values in fall
the_title = "fall_rmed - event_med_slope_b"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

#value_range = range(c(bchars$wint_rmed - bchars$event_med_slope, bchars$spri_rmed - bchars$event_med_slope,
# bchars$summ_rmed - bchars$event_med_slope, bchars$fall_rmed - bchars$event_med_slope), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=17)
spdf$plotty = findInterval(bchars$fall_rmed - bchars$event_med_slope, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=3, lwd=2.5, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()







############################
## log(a) plots)
############################


#Median Event log(a) values
the_title = "event_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(bchars$event_a_rmed)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$event_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=.05)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
dev.off()

#Date of min a
the_title = "date_mina"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = 1:366
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=13)
spdf$plotty = findInterval(bchars$date_mina, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Date of max a
the_title = "date_maxa"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = 1:366
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=13)
spdf$plotty = findInterval(bchars$date_maxa, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
dev.off()

#Average a values in winter
the_title = "wint_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_a_rmed, bchars$spri_a_rmed, bchars$summ_a_rmed, bchars$fall_a_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$wint_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average a values in spring
the_title = "spri_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_a_rmed, bchars$spri_a_rmed, bchars$summ_a_rmed, bchars$fall_a_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$spri_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average a values in summer
the_title = "summ_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_a_rmed, bchars$spri_a_rmed, bchars$summ_a_rmed, bchars$fall_a_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$summ_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average a values in summer
the_title = "fall_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_a_rmed, bchars$spri_a_rmed, bchars$summ_a_rmed, bchars$fall_a_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=20)
spdf$plotty = findInterval(bchars$fall_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of a values in winter
the_title = "event_a_rmed - wint_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_a_rmed - bchars$event_a_rmed, bchars$spri_a_rmed - bchars$event_a_rmed,
bchars$summ_a_rmed - bchars$event_a_rmed, bchars$fall_a_rmed - bchars$event_a_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=7)
spdf$plotty = findInterval(bchars$event_a_rmed - bchars$wint_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()

#Average deviation of a values in spring
the_title = "event_a_rmed - spri_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_a_rmed - bchars$event_a_rmed, bchars$spri_a_rmed - bchars$event_a_rmed,
bchars$summ_a_rmed - bchars$event_a_rmed, bchars$fall_a_rmed - bchars$event_a_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=7)
spdf$plotty = findInterval(bchars$event_a_rmed - bchars$spri_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average deviation of a values in summer
the_title = "event_a_rmed - summ_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_a_rmed - bchars$event_a_rmed, bchars$spri_a_rmed - bchars$event_a_rmed,
bchars$summ_a_rmed - bchars$event_a_rmed, bchars$fall_a_rmed - bchars$event_a_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=7)
spdf$plotty = findInterval(bchars$event_a_rmed - bchars$summ_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()


#Average deviation of b values in fall
the_title = "event_a_rmed - fall_a_rmed"
png(paste0(the_title, ".png"), width=2400, height=1200)
plot(USA, ylim=c(26,49), xlim=c(-125,-64))

value_range = range(c(bchars$wint_a_rmed - bchars$event_a_rmed, bchars$spri_a_rmed - bchars$event_a_rmed,
bchars$summ_a_rmed - bchars$event_a_rmed, bchars$fall_a_rmed - bchars$event_a_rmed), na.rm=TRUE)
value_bins = seq(floor(min(value_range)), ceiling(max(value_range)), length.out=7)
spdf$plotty = findInterval(bchars$event_a_rmed - bchars$fall_a_rmed, value_bins)

pal = colorRampPalette(c("red4","red3","darksalmon","lightskyblue1","royalblue2","royalblue4",
"royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4","royalblue4"),
bias=1)
col_pal = pal(16)

plot(spdf, breaks=value_bins, col=col_pal[spdf$plotty], pch=8, cex=5, lwd=2.7, add=TRUE)
legend(x=-127, y=35, legend = round(value_bins[c(1,2,3,4,5,6,7,17)],1), col = col_pal[c(1,2,3,4,5,6,7,16)],
pch = 8, lwd=2, border=NULL, cex=2.7)
title(main=the_title)
dev.off()




